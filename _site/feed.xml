<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>FEX 百度 Web 前端研发部</title>
        <description></description>      
        <link>http://fex.baidu.com</link>
        <atom:link href="http://fex.baidu.com/feed.xml" rel="self" type="application/rss+xml" />
        
            <item>
                <title>从输入 URL 到页面加载完成的过程中都发生了什么事情？</title>
                <description>作者：nwind &lt;br&gt; &lt;h2&gt;背景&lt;/h2&gt;

&lt;p&gt;本文来自于之前我发的一篇微博：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/what-happen/nwind-weibo.png&quot; alt=&quot;nwind-weibo&quot;&gt;&lt;/p&gt;

&lt;p&gt;不过写这篇文章并不是为了帮大家准备面试，而是想借这道题来介绍计算机和互联网的基础知识，让读者了解它们之间是如何关联起来的。&lt;/p&gt;

&lt;p&gt;为了便于理解，我将整个过程分为了六个问题来展开。&lt;/p&gt;

&lt;h2&gt;第一个问题：从输入 URL 到浏览器接收的过程中发生了什么事情？&lt;/h2&gt;

&lt;h3&gt;从触屏到 CPU&lt;/h3&gt;

&lt;p&gt;首先是「输入 URL」，大部分人的第一反应会是键盘，不过为了与时俱进，这里将介绍触摸屏设备的交互。&lt;/p&gt;

&lt;p&gt;触摸屏一种传感器，目前大多是基于电容(Capacitive)来实现的，以前都是直接覆盖在显示屏上的，不过最近出现了 3 种嵌入到显示屏中的技术，第一种是 iPhone 5 的 In-cell，它能减小了 0.5 毫米的厚度，第二种是三星使用的 On-cell 技术，第三种是国内厂商喜欢用的 OGS 全贴合技术，具体细节可以阅读&lt;a href=&quot;http://www.igao7.com/in-cell-on-cell-ogs.html&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;当手指在这个传感器上触摸时，有些电子会传递到手上，从而导致该区域的电压变化，触摸屏控制器芯片根据这个变化就能计算出所触摸的位置，然后通过总线接口将信号传到 CPU 的引脚上。&lt;/p&gt;

&lt;p&gt;以 Nexus 5 为例，它所使用的触屏控制器是 &lt;a href=&quot;http://www.ifixit.com/Teardown/Nexus+5+Teardown/19016&quot;&gt;Synaptics S3350B&lt;/a&gt;，总线接口为 &lt;a href=&quot;http://en.wikipedia.org/wiki/I%C2%B2C&quot;&gt;I²C&lt;/a&gt;，以下是 Synaptics 触摸屏和处理器连接的示例：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/what-happen/clearpad-i2c.png&quot; alt=&quot;clearpad-i2c&quot;&gt;&lt;/p&gt;

&lt;p&gt;左边是处理器，右边是触摸屏控制器，中间的 SDA 和 SCL 连线就是 I²C 总线接口。&lt;/p&gt;

&lt;h3&gt;CPU 内部的处理&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;移动设备中的 CPU 并不是一个单独的芯片，而是和 GPU 等芯片集成在一起，被称为 SoC（片上系统）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前面提到了触屏和 CPU 的连接，这个连接和大部分计算机内部的连接一样，都是通过电气信号来进行通信的，也就是电压高低的变化，如下面的时序图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/what-happen/i2c-wave.png&quot; alt=&quot;i2c-wave&quot;&gt;&lt;/p&gt;

&lt;p&gt;在时钟的控制下，这些电流会经过 &lt;a href=&quot;http://en.wikipedia.org/wiki/MOSFET&quot;&gt;MOSFET&lt;/a&gt; 晶体管，晶体管中包含 N 型半导体和 P 型半导体，通过电压就能控制线路开闭，然后这些 MOSFET 构成了 &lt;a href=&quot;http://en.wikipedia.org/wiki/CMOS&quot;&gt;CMOS&lt;/a&gt;，接着再由 CMOS 实现「与」「或」「非」等逻辑电路门，最后由逻辑电路门上就能实现加法、位移等计算，整体如下图所示（来自《计算机体系结构》）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/what-happen/cpu.png&quot; alt=&quot;cpu&quot;&gt;&lt;/p&gt;

&lt;p&gt;除了计算，在 CPU 中还需要存储单元来加载和存储数据，这个存储单元一般通过触发器(Flip-flop)来实现，称为寄存器。&lt;/p&gt;

&lt;p&gt;以上这些概念都比较抽象，推荐阅读「&lt;a href=&quot;http://www.instructables.com/id/How-to-Build-an-8-Bit-Computer/?ALLSTEPS&quot;&gt;How to Build an 8-Bit Computer&lt;/a&gt;」这篇文章，作者基于晶体管、二极管、电容等原件制作了一个 8 位的计算机，支持简单汇编指令和结果输出，虽然现代 CPU 的实现要比这个复杂得多，但基本原理还是一样的。&lt;/p&gt;

&lt;p&gt;另外其实我也是刚开始学习 CPU 芯片的实现，所以就不在这误人子弟了，感兴趣的读者请阅读本节后面推荐的书籍。&lt;/p&gt;

&lt;h3&gt;从 CPU 到操作系统内核&lt;/h3&gt;

&lt;p&gt;前面说到触屏控制器将电气信号发送到 CPU 对应的引脚上，接着就会触发 CPU 的中断机制，以 Linux 为例，每个外部设备都有一标识符，称为中断请求(IRQ)号，可以通过 &lt;code&gt;/proc/interrupts&lt;/code&gt; 文件来查看系统中所有设备的中断请求号，以下是 Nexus 7 (2013) 的部分结果：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;shell@flo:/ $ cat /proc/interrupts
            CPU0
  17:          0       GIC  dg_timer
 294:    1973609   msmgpio  elan-ktf3k
 314:        679   msmgpio  KEY_POWER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为 Nexus 7 使用了 ELAN 的触屏控制器，所以结果中的 elan-ktf3k 就是触屏的中断请求信息，其中 294 是中断号，1973609 是触发的次数（手指单击时会产生两次中断，但滑动时会产生上百次中断）。&lt;/p&gt;

&lt;p&gt;为了简化这里不考虑优先级问题，以 ARMv7 架构的处理器为例，当中断发生时，CPU 会停下当前运行的程序，保存当前执行状态（如 PC 值），进入 IRQ 状态），然后跳转到对应的中断处理程序执行，这个程序一般由第三方内核驱动来实现，比如前面提到的 Nexus 7 的驱动源码在这里 &lt;a href=&quot;https://android.googlesource.com/kernel/tegra/+/android-tegra3-grouper-3.1-kitkat-mr1/drivers/input/touchscreen/ektf3k.c&quot;&gt;touchscreen/ektf3k.c&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这个驱动程序将读取 I²C 总线中传来的位置数据，然后通过内核的 &lt;a href=&quot;https://android.googlesource.com/kernel/msm.git/+/android-msm-hammerhead-3.4-kk-r1/include/linux/input.h#1525&quot;&gt;input_report_abs&lt;/a&gt; 等方法记录触屏按下坐标等信息，最后由内核中的 &lt;a href=&quot;https://android.googlesource.com/kernel/msm.git/+/android-msm-hammerhead-3.4-kk-r1/drivers/input/input.c#349&quot;&gt;input 子模块&lt;/a&gt;将这些信息都写进 &lt;code&gt;/dev/input/event0&lt;/code&gt; 这个设备文件中，比如下面展示了一次触摸事件所产生的信息：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;130|shell@flo:/ $ getevent -lt /dev/input/event0
[  414624.658986] EV_ABS       ABS_MT_TRACKING_ID   0000835c
[  414624.659017] EV_ABS       ABS_MT_TOUCH_MAJOR   0000000b
[  414624.659047] EV_ABS       ABS_MT_PRESSURE      0000001d
[  414624.659047] EV_ABS       ABS_MT_POSITION_X    000003f0
[  414624.659078] EV_ABS       ABS_MT_POSITION_Y    00000588
[  414624.659078] EV_SYN       SYN_REPORT           00000000
[  414624.699239] EV_ABS       ABS_MT_TRACKING_ID   ffffffff
[  414624.699270] EV_SYN       SYN_REPORT           00000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;从操作系统 GUI 到浏览器&lt;/h3&gt;

&lt;p&gt;前面提到 Linux 内核已经完成了对硬件的抽象，其它程序只需要通过监听 &lt;code&gt;/dev/input/event0&lt;/code&gt; 文件的变化就能知道用户进行了哪些触摸操作，不过如果每个程序都这么做实在太麻烦了，所以在图像操作系统中都会包含 GUI 框架来方便应用程序开发，比如 Linux 下著名的 &lt;a href=&quot;http://www.x.org/&quot;&gt;X&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;但 Android 并没有使用 X，而是自己实现了一套 GUI 框架，其中有个 &lt;a href=&quot;http://androidxref.com/4.4.2_r1/xref/frameworks/base/services/input/EventHub.cpp&quot;&gt;EventHub&lt;/a&gt; 的服务会通过 &lt;a href=&quot;http://man7.org/linux/man-pages/man7/epoll.7.html&quot;&gt;epoll&lt;/a&gt; 方式监听 &lt;code&gt;/dev/input/&lt;/code&gt; 目录下的文件，然后将这些信息传递到 Android 的窗口管理服务(&lt;a href=&quot;https://github.com/android/platform_frameworks_base/blob/kitkat-mr1.1-release/services/java/com/android/server/wm/WindowManagerService.java&quot;&gt;WindowManagerService&lt;/a&gt;)中，它会根据位置信息来查找相应的 app，然后调用其中的监听函数（如 onTouch 等）。&lt;/p&gt;

&lt;p&gt;就这样，我们解答了第一个问题，不过由于时间有限，这里省略了很多细节，想进一步学习的读者推荐阅读以下书籍。&lt;/p&gt;

&lt;h3&gt;扩展学习&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/6559064/&quot;&gt;计算机体系结构&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/7006537/&quot;&gt;计算机体系结构：量化研究方法&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/10441748/&quot;&gt;计算机组成与设计：硬件/软件接口&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/20260928/&quot;&gt;编码&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/25780703/&quot;&gt;CPU自制入门&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/4289836/&quot;&gt;操作系统概念&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0406c/index.html&quot;&gt;ARMv7-AR 体系结构参考手册&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/6097773/&quot;&gt;Linux内核设计与实现&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/4311450/&quot;&gt;精通Linux设备驱动程序开发&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;第二个问题：浏览器如何向网卡发送数据？&lt;/h2&gt;

&lt;h3&gt;从浏览器到浏览器内核&lt;/h3&gt;

&lt;p&gt;前面提到操作系统 GUI 将输入事件传递到了浏览器中，在这过程中，浏览器可能会做一些预处理，比如 Chrome 会根据历史统计来预估所输入字符对应的网站，比如输入了「ba」，根据之前的历史发现 90% 的概率会访问「www.baidu.com 」，因此就会在输入回车前就马上开始建立 TCP 链接甚至渲染了，这里面还有很多其它策略，感兴趣的读者推荐阅读 &lt;a href=&quot;http://aosabook.org/en/posa/high-performance-networking-in-chrome.html&quot;&gt;High Performance Networking in Chrome&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;接着是输入 URL 后的「回车」，这时浏览器会对 URL 进行检查，首先判断协议，如果是 http 就按照 Web 来处理，另外还会对这个 URL 进行安全检查，然后直接调用浏览器内核中的对应方法，比如 &lt;a href=&quot;http://developer.android.com/reference/android/webkit/WebView.html&quot;&gt;WebView&lt;/a&gt; 中的 loadUrl 方法。&lt;/p&gt;

&lt;p&gt;在浏览器内核中会先查看缓存，然后设置 UA 等 HTTP 信息，接着调用不同平台下网络请求的方法。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;需要注意浏览器和浏览器内核是不同的概念，浏览器指的是 Chrome、Firefox，而浏览器内核则是 Blink、Gecko，浏览器内核只负责渲染，GUI 及网络连接等跨平台工作则是浏览器实现的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;HTTP 请求的发送&lt;/h3&gt;

&lt;p&gt;因为网络的底层实现是和内核相关的，所以这一部分需要针对不同平台进行处理，从应用层角度看主要做两件事情：通过 DNS 查询 IP、通过 Socket 发送数据，接下来就分别介绍这两方面的内容。&lt;/p&gt;

&lt;h3&gt;DNS 查询&lt;/h3&gt;

&lt;p&gt;应用程序可以直接调用 Libc 提供的 &lt;a href=&quot;http://linux.die.net/man/3/getaddrinfo&quot;&gt;getaddrinfo()&lt;/a&gt; 方法来实现 DNS 查询。&lt;/p&gt;

&lt;p&gt;DNS 查询其实是基于 UDP 来实现的，这里我们通过一个具体例子来了解它的查找过程，以下是使用 &lt;code&gt;dig +trace fex.baidu.com&lt;/code&gt; 命令得到的结果（省略了一些）：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.8.3-P1 &amp;lt;&amp;lt;&amp;gt;&amp;gt; +trace fex.baidu.com
;; global options: +cmd
.           11157   IN  NS  g.root-servers.net.
.           11157   IN  NS  i.root-servers.net.
.           11157   IN  NS  j.root-servers.net.
.           11157   IN  NS  a.root-servers.net.
.           11157   IN  NS  l.root-servers.net.
;; Received 228 bytes from 8.8.8.8#53(8.8.8.8) in 220 ms

com.            172800  IN  NS  a.gtld-servers.net.
com.            172800  IN  NS  c.gtld-servers.net.
com.            172800  IN  NS  m.gtld-servers.net.
com.            172800  IN  NS  h.gtld-servers.net.
com.            172800  IN  NS  e.gtld-servers.net.
;; Received 503 bytes from 192.36.148.17#53(192.36.148.17) in 185 ms

baidu.com.      172800  IN  NS  dns.baidu.com.
baidu.com.      172800  IN  NS  ns2.baidu.com.
baidu.com.      172800  IN  NS  ns3.baidu.com.
baidu.com.      172800  IN  NS  ns4.baidu.com.
baidu.com.      172800  IN  NS  ns7.baidu.com.
;; Received 201 bytes from 192.48.79.30#53(192.48.79.30) in 1237 ms

fex.baidu.com.      7200    IN  CNAME   fexteam.duapp.com.
fexteam.duapp.com.  300 IN  CNAME   duapp.n.shifen.com.
n.shifen.com.       86400   IN  NS  ns1.n.shifen.com.
n.shifen.com.       86400   IN  NS  ns4.n.shifen.com.
n.shifen.com.       86400   IN  NS  ns2.n.shifen.com.
n.shifen.com.       86400   IN  NS  ns5.n.shifen.com.
n.shifen.com.       86400   IN  NS  ns3.n.shifen.com.
;; Received 258 bytes from 61.135.165.235#53(61.135.165.235) in 2 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到这是一个逐步缩小范围的查找过程，首先由本机所设置的 DNS 服务器(8.8.8.8)向 DNS 根节点查询负责 .com 区域的域务器，然后通过其中一个负责 .com 的服务器查询负责 baidu.com 的服务器，最后由其中一个 baidu.com 的域名服务器查询 fex.baidu.com 域名的地址。&lt;/p&gt;

&lt;p&gt;可能你在查询某些域名的时会发现和上面不一样，最底将看到有个奇怪的服务器抢先返回结果。。。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里为了方便描述，忽略了很多不同的情况，比如 127.0.0.1 其实走的是 &lt;a href=&quot;http://en.wikipedia.org/wiki/Localhost&quot;&gt;loopback&lt;/a&gt;，和网卡设备没关系；比如 Chrome 会在浏览器启动的时预先查询 10 个你有可能访问的域名；还有 Hosts 文件、缓存时间 TTL(Time to live)的影响等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;通过 Socket 发送数据&lt;/h3&gt;

&lt;p&gt;有了 IP 地址，就可以通过 Socket API 来发送数据了，这时可以选择 TCP 或 UDP 协议，具体使用方法这里就不介绍了，推荐阅读 &lt;a href=&quot;http://beej.us/guide/bgnet/&quot;&gt;Beej&amp;#39;s Guide to Network Programming&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;HTTP 常用的是 TCP 协议，由于 TCP 协议的具体细节到处都能看到，所以本文就不介绍了，这里谈一下 TCP 的 Head-of-line blocking 问题：假设客户端的发送了 3 个 TCP 片段(segments)，编号分别是 1、2、3，如果编号为 1 的包传输时丢了，即便编号 2 和 3 已经到达也只能等待，因为 TCP 协议需要保证顺序，这个问题在 HTTP pipelining 下更严重，因为 HTTP pipelining 可以让多个 HTTP 请求通过一个 TCP 发送，比如发送两张图片，可能第二张图片的数据已经全收到了，但还得等第一张图片的数据传到。&lt;/p&gt;

&lt;p&gt;为了解决 TCP 协议的性能问题，Chrome 团队去年提出了 &lt;a href=&quot;http://en.wikipedia.org/wiki/QUIC&quot;&gt;QUIC&lt;/a&gt; 协议，它是基于 UDP 实现的可靠传输，比起 TCP，它能减少很多来回(round trip)时间，还有前向纠错码(Forward Error Correction)等功能。目前 Google Plus、 Gmail、Google Search、blogspot、Youtube 等几乎大部分 Google 产品都在使用 QUIC，可以通过 &lt;code&gt;chrome://net-internals/#spdy&lt;/code&gt; 页面来发现。&lt;/p&gt;

&lt;p&gt;虽然目前除了 Google 还没人用 QUIC，但我觉得挺有前景的，因为优化 TCP 需要升级系统内核（比如 &lt;a href=&quot;http://en.wikipedia.org/wiki/TCP_Fast_Open&quot;&gt;Fast Open&lt;/a&gt;）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;浏览器对同一个域名有连接数限制，&lt;a href=&quot;http://www.browserscope.org/?category=network&amp;amp;v=top&quot;&gt;大部分是 6&lt;/a&gt;，我以前认为将这个连接数改大后会提升性能，但实际上并不是这样的，Chrome 团队有做过实验，发现从 6 改成 10 后性能反而下降了，造成这个现象的因素有很多，如建立连接的开销、拥塞控制等问题，而像 SPDY、HTTP 2.0 协议尽管只使用一个 TCP 连接来传输数据，但性能反而更好，而且还能实现请求优先级。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;另外，因为 HTTP 请求是纯文本格式的，所以在 TCP 的数据段中可以直接分析 HTTP 的文本，如果发现。。。&lt;/p&gt;

&lt;h3&gt;Socket 在内核中的实现&lt;/h3&gt;

&lt;p&gt;前面说到浏览器的跨平台库通过调用 Socket API 来发送数据，那么 Socket API 是如何实现的呢？&lt;/p&gt;

&lt;p&gt;以 Linux 为例，它的实现在这里 &lt;a href=&quot;http://lxr.linux.no/linux+v3.14.4/net/socket.c&quot;&gt;socket.c&lt;/a&gt;，目前我还不太了解，推荐读者看看 &lt;a href=&quot;http://www.makelinux.net/kernel_map/&quot;&gt;Linux kernel map&lt;/a&gt;，它标注出了关键路径的函数，方便学习从协议栈到网卡驱动的实现。&lt;/p&gt;

&lt;h3&gt;底层网络协议的具体例子&lt;/h3&gt;

&lt;p&gt;接下来如果继续介绍 IP 协议和 MAC 协议可能很多读者会晕，所以本节将使用 &lt;a href=&quot;http://www.wireshark.org/download.html&quot;&gt;Wireshark&lt;/a&gt; 来通过具体例子讲解，以下是我请求百度首页时抓取到的网络数据：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/what-happen/wireshark-all.png&quot; alt=&quot;wireshark&quot;&gt;&lt;/p&gt;

&lt;p&gt;最底下是实际的二进制数据，中间是解析出来的各个字段值，可以看到其中最底部为 HTTP 协议(Hypertext Transfer Protocol)，在 HTTP 之前有 54 字节(0x36)，这就是底层网络协议所带来的开销，我们接下来对这些协议进行分析。&lt;/p&gt;

&lt;p&gt;在 HTTP 之上是 TCP 协议(Transmission Control Protocol)，它的具体内容如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/what-happen/wireshark-tcp.png&quot; alt=&quot;wireshark&quot;&gt;&lt;/p&gt;

&lt;p&gt;通过底部的二进制数据，可以看到 TCP 协议是加在 HTTP 文本前面的，它有 20 个字节，其中定义了本地端口(Source port)和目标端口(Destination port)、顺序序号(Sequence Number)、窗口长度等信息，以下是 TCP 协议各个部分数据的完整介绍：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Source Port          |       Destination Port        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        Sequence Number                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Acknowledgment Number                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Data |           |U|A|E|R|S|F|                               |
| Offset| Reserved  |R|C|O|S|Y|I|            Window             |
|       |           |G|K|L|T|N|N|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Checksum            |         Urgent Pointer        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Options                    |    Padding    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             data                              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体各个字段的作用这里就不介绍了，感兴趣的读者可以阅读 &lt;a href=&quot;http://tools.ietf.org/html/rfc793&quot;&gt;RFC 793&lt;/a&gt;，并结合抓包分析来理解。&lt;/p&gt;

&lt;p&gt;需要注意的是，在 TCP 协议中并没有 IP 地址信息，因为这是在上一层的 IP 协议中定义的，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/what-happen/wireshark-ip.png&quot; alt=&quot;wireshark&quot;&gt;&lt;/p&gt;

&lt;p&gt;IP 协议同样是在 TCP 前面的，它也有 20 字节，在这里指明了版本号(Version)为 4，源(Source) IP 为 &lt;code&gt;192.168.1.106&lt;/code&gt;，目标(Destination) IP 为 &lt;code&gt;119.75.217.56&lt;/code&gt;，因此 IP 协议最重要的作用就是确定 IP 地址。&lt;/p&gt;

&lt;p&gt;因为 IP 协议中可以查看到目标 IP 地址，所以如果发现某些特定的 IP 地址，某些路由器就会。。。&lt;/p&gt;

&lt;p&gt;但是，光靠 IP 地址是无法进行通信的，因为 IP 地址并不和某台设备绑定，比如你的笔记本的 IP 在家中是 &lt;code&gt;192.168.1.1&lt;/code&gt;，但到公司就变成 &lt;code&gt;172.22.22.22&lt;/code&gt; 了，所以在底层通信时需要使用一个固定的地址，这就是 MAC(media access control) 地址，每个网卡出厂时的 MAC 地址都是固定且唯一的。&lt;/p&gt;

&lt;p&gt;因此再往上就是 MAC 协议，它有 14 字节，如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/what-happen/wireshark-ethernet.png&quot; alt=&quot;wireshark&quot;&gt;&lt;/p&gt;

&lt;p&gt;当一台电脑加入网络时，需要通过 &lt;a href=&quot;http://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP&lt;/a&gt; 协议告诉其它网络设备它的 IP 及对应的 MAC 地址是什么，这样其它设备就能通过 IP 地址来查找对应的设备了。&lt;/p&gt;

&lt;p&gt;最顶上的 Frame 是代表 Wireshark 的抓包序号，并不是网络协议&lt;/p&gt;

&lt;p&gt;就这样，我们解答了第二个问题，不过其实这里面还有很多很多细节没介绍，建议大家通过下面的书籍进一步学习。&lt;/p&gt;

&lt;h3&gt;扩展学习&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/1391207/&quot;&gt;计算机网络：自顶向下方法与Internet特色&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/10510747/&quot;&gt;计算机网络&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/25856314/&quot;&gt;Web性能权威指南&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;第三个问题：数据如何从本机网卡发送到服务器？&lt;/h2&gt;

&lt;h3&gt;从内核到网络适配器(Network Interface Card)&lt;/h3&gt;

&lt;p&gt;前面说到调用 Socket API 后内核会对数据进行底层协议栈的封装，接下来启动 &lt;a href=&quot;http://en.wikipedia.org/wiki/Direct_memory_access&quot;&gt;DMA&lt;/a&gt; 控制器，它将从内存中读取数据写入网卡。&lt;/p&gt;

&lt;p&gt;以 Nexus 5 为例，它使用的是博通 &lt;a href=&quot;http://www.broadcom.com/press/release.php?id=s766879&quot;&gt;BCM4339&lt;/a&gt; 芯片通信，接口采用了 SD 卡一样的 &lt;a href=&quot;http://en.wikipedia.org/wiki/Secure_Digital#SDIO&quot;&gt;SDIO&lt;/a&gt;，但这个芯片的细节并没有公开资料，所以这里就不讨论了。&lt;/p&gt;

&lt;h3&gt;连接 Wi-Fi 路由&lt;/h3&gt;

&lt;p&gt;Wi-Fi 网卡需要通过 Wi-Fi 路由来与外部通信，原理是基于无线电，通过电流变化来产生无线电，这个过程也叫「调制」，而反过来无线电可以引起电磁场变化，从而产生电流变化，利用这个原理就能将无线电中的信息解读出来就叫「解调」，其中单位时间内变化的次数就称为频率，目前在 Wi-Fi 中所采用的频率分为 2.4 GHz 和 5 GHz 两种。&lt;/p&gt;

&lt;p&gt;在同一个 Wi-Fi 路由下，因为采用的频率相同，同时使用时会发生冲突，为了解决这个问题，Wi-Fi 采用了被称为 &lt;a href=&quot;http://en.wikipedia.org/wiki/Carrier_sense_multiple_access_with_collision_avoidance&quot;&gt;CSMA/CA&lt;/a&gt; 的方法，简单来说就是在传输前先确认信道是否已被使用，没有才发送数据。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;而同样基于无线电原理的 2G/3G/LTE 也会遇到类似的问题，但它并没有采用 Wi-Fi 那样的独占方案，而是通过频分(FDMA)、时分(TDMA)和码分(CDMA)来进行复用，具体细节这里就不展开了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以小米路由为例，它使用的芯片是 &lt;a href=&quot;http://www.broadcom.com/products/Wireless-LAN/802.11-Wireless-LAN-Solutions/BCM4707-4708-4709&quot;&gt;BCM 4709&lt;/a&gt;，这个芯片由 ARM Cortex-A9 处理器及流量(Flow)硬件加速组成，使用硬件芯片可以避免经过操作系统中断、上下文切换等操作，从而提升了性能。&lt;/p&gt;

&lt;p&gt;路由器中的操作系统可以基于 &lt;a href=&quot;https://openwrt.org/&quot;&gt;OpenWrt&lt;/a&gt; 或 &lt;a href=&quot;http://www.dd-wrt.com/&quot;&gt;DD-WRT&lt;/a&gt; 来开发的，具体细节我不太了解，所以就不展开了。&lt;/p&gt;

&lt;p&gt;因为内网设备的 IP 都是类似 &lt;code&gt;192.168.1.x&lt;/code&gt; 这样的内网地址，外网无法直接向这个地址发送数据，所以网络数据在经过路由时，路由会修改相关地址和端口，这个操作称为 &lt;a href=&quot;http://en.wikipedia.org/wiki/Network_address_translation&quot;&gt;NAT&lt;/a&gt; 映射。&lt;/p&gt;

&lt;p&gt;最后家庭路由一般会通过&lt;a href=&quot;http://en.wikipedia.org/wiki/Twisted_pair&quot;&gt;双绞线&lt;/a&gt;连接到运营商网络的。&lt;/p&gt;

&lt;h3&gt;运营商网络内的路由&lt;/h3&gt;

&lt;p&gt;数据过双绞线发送到运营商网络后，还会经过很多个中间路由转发，读者可以通过 traceroute 命令或者&lt;a href=&quot;http://www.linkwan.com/gb/broadmeter/tracemap/traceroute.asp&quot;&gt;在线可视化工具&lt;/a&gt;来查看这些路由的 ip 和位置。&lt;/p&gt;

&lt;p&gt;当数据传递到这些路由器后，路由器会取出包中目的地址的前缀，通过内部的转发表查找对应的输出链路，而这个转发表是如何得到的呢？这就是路由器中最重要的选路算法了，可选的有很多，我对这方面并不太了解，看起来&lt;a href=&quot;http://en.wikipedia.org/wiki/Routing#Routing_algorithms_and_techniques&quot;&gt;维基百科&lt;/a&gt;上的词条列得很全。&lt;/p&gt;

&lt;h3&gt;主干网间的传输&lt;/h3&gt;

&lt;p&gt;对于长线的数据传输，通常使用光纤作为介质，光纤是基于光的全反射来实现的，使用光纤需要专门的发射器通过&lt;a href=&quot;http://en.wikipedia.org/wiki/Electroluminescence&quot;&gt;电致发光&lt;/a&gt;（比如 LED）将电信号转成光，比起前面介绍的无线电和双绞线，光纤信号的抗干扰性要强得多，而且能耗也小很多。&lt;/p&gt;

&lt;p&gt;既然是基于光来传输数据，数据传输速度也就取决于光的速度，在真空中的光速接近于 30 万千米/秒，由于光纤包层(cladding)中的折射率(refractive index)为 1.52，所以实际光速是 20 万千米/秒左右，从首都机场飞往广州白云机场的距离是 1967 千米，按照这个距离来算需要花费 10 毫秒才能抵达。这意味着如果你在北京，服务器在广州，等你发出数据到服务器返回数据至少得等 20 毫秒，实际情况预计是 2- 3 倍，因为这其中还有各个节点路由处理的耗时，比如我测试了一个广州的 IP 发现平均延迟为 60 毫秒。&lt;/p&gt;

&lt;p&gt;这个延迟是现有科技无法解决的（除非找到超过光速的方法），只能通过 CDN 来让传输距离变短，或尽量减少串行的来回请求（比如 TCP 建立连接所需的 3 次握手）。&lt;/p&gt;

&lt;h3&gt;IDC 内网&lt;/h3&gt;

&lt;p&gt;数据通过光纤最终会来到服务器所在的 IDC 机房，进入 IDC 内网，这时可以先通过&lt;a href=&quot;http://en.wikipedia.org/wiki/Fiber_optic_splitter&quot;&gt;分光器&lt;/a&gt;将流量镜像一份出来方便进行安全检查等分析，还能用来进行。。。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里的带宽成本很高，是按照峰值来结算的，以每月每 Gbps（注意这里指的是 bit，而不是 Byte）为单位，北京这边价格在十万人民币以上，一般网站使用 1G 到 10G 不等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;接下来光纤中的数据将进入集群(Cluster)交换机，然后再转发到机架(Rack)顶部的交换机，最后通过这个交换机的端口将数据发往机架中的服务器，可以参考下图（来自 Open Compute）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/what-happen/open-rack.png&quot; alt=&quot;rack&quot;&gt;&lt;/p&gt;

&lt;p&gt;上图左边是正面，右边是侧面，可以看到顶部为交换机所留的位置。&lt;/p&gt;

&lt;p&gt;以前这些交换机的内部实现是封闭的，相关厂商（如思科、Juniper 等）会使用特定的处理器和操作系统，外界难以进行灵活控制，甚至有时候需要手工配置，但这几年随着 &lt;a href=&quot;https://www.opennetworking.org/&quot;&gt;OpenFlow&lt;/a&gt; 技术的流行，也出现了开放交换机硬件(Open Switch Hardware)，比如 Intel 的&lt;a href=&quot;http://www.intel.com/onp&quot;&gt;网络平台&lt;/a&gt;，推荐感兴趣的读者建议看看&lt;a href=&quot;http://www.intel.com/content/www/us/en/switch-silicon/open-network-platform-onp-benefits-video.html&quot;&gt;它的视频&lt;/a&gt;，比文字描述清晰多了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;需要注意的是，一般网络书中提到的交换机都只具备二层（MAC 协议）的功能，但在 IDC 中的交换器基本上都具备三层（IP 协议）的功能，所以不需要有专门的路由了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最后，因为 CPU 处理的是电气信号，所以光纤中的光线需要先使用相关设备通过&lt;a href=&quot;http://en.wikipedia.org/wiki/Photoelectric_effect&quot;&gt;光电效应&lt;/a&gt;将光信号转成电信号，然后进入服务器网卡。&lt;/p&gt;

&lt;h3&gt;服务器 CPU&lt;/h3&gt;

&lt;p&gt;前面说到数据已经到达服务器网卡了，接着网卡会将数据拷贝到内存中（DMA），然后通过中断来通知 CPU，目前服务器端的 CPU 基本上都是 &lt;a href=&quot;http://en.wikipedia.org/wiki/Xeon&quot;&gt;Intel Xeon&lt;/a&gt;，不过这几年出现了一些新的架构，比如在存储领域，百度使用 &lt;a href=&quot;http://cn.technode.com/post/2013-01-16/40046818983/&quot;&gt;ARM&lt;/a&gt; 架构来提升存储密度，因为 ARM 的功耗比 Xeon 低得多。而在高性能领域，Google 最近在尝试基于 &lt;a href=&quot;https://plus.google.com/u/0/111282580643669107165/posts/Uwh9W3XiZTQ&quot;&gt;POWER&lt;/a&gt; 架构的 CPU 来开发的服务器，最新的 POWER8 处理器可以并行执行 96 个线程，所以对高并发的应用应该很有帮助。&lt;/p&gt;

&lt;h3&gt;扩展学习&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.morganclaypool.com/doi/abs/10.2200/S00516ED2V01Y201306CAC024&quot;&gt;The Datacenter as a Computer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.opencompute.org/&quot;&gt;Open Computer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/25866394/&quot;&gt;软件定义网络&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/4199502/&quot;&gt;大话无线通信&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;第四个问题：服务器接收到数据后会进行哪些处理？&lt;/h2&gt;

&lt;p&gt;为了避免重复，这里将不再介绍操作系统，而是直接进入后端服务进程，由于这方面有太多技术选型，所以我只挑几个常见的公共部分来介绍。&lt;/p&gt;

&lt;h3&gt;负载均衡&lt;/h3&gt;

&lt;p&gt;请求在进入到真正的应用服务器前，可能还会先经过负责负载均衡的机器，它的作用是将请求合理地分配到多个服务器上，同时具备具备防攻击等功能。&lt;/p&gt;

&lt;p&gt;负载均衡具体实现有很多种，有直接基于硬件的 F5，有操作系统传输层(TCP)上的 &lt;a href=&quot;http://www.linuxvirtualserver.org/&quot;&gt;LVS&lt;/a&gt;，也有在应用层(HTTP)实现的反向代理（也叫七层代理），接下来将介绍 LVS 及反向代理。&lt;/p&gt;

&lt;p&gt;负载均衡的策略也有很多，如果后面的多个服务器性能均衡，最简单的方法就是挨个循环一遍(Round-Robin)，其它策略就不一一介绍了，可以参考 LVS 中的&lt;a href=&quot;http://www.linuxvirtualserver.org/docs/scheduling.html&quot;&gt;算法&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LVS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;LVS 的作用是从对外看来只有一个 IP，而实际上这个 IP 后面对应是多台机器，因此也被成为 Virtual IP。&lt;/p&gt;

&lt;p&gt;前面提到的 NAT 也是一种 LVS 中的工作模式，除此之外还有 DR 和 TUNNEL，具体细节这里就不展开了，它们的缺点是无法跨网段，所以百度自己开发了 BVS 系统。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;反向代理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;方向代理是工作在 HTTP 上的，具体实现可以基于 HAProxy 或 Nginx，因为反向代理能理解 HTTP 协议，所以能做非常多的事情，比如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;进行很多统一处理，比如防攻击策略、放抓取、SSL、gzip、自动性能优化等&lt;/li&gt;
&lt;li&gt;应用层的分流策略都能在这里做，比如对 /xx 路径的请求分到 a 服务器，对 /yy 路径的请求分到 b 服务器，或者按照 cookie 进行小流量测试等&lt;/li&gt;
&lt;li&gt;缓存，并在后端服务挂掉的时候显示友好的 404 页面&lt;/li&gt;
&lt;li&gt;监控后端服务是否异常&lt;/li&gt;
&lt;li&gt;⋯⋯&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nginx 的代码写得非常优秀，从中能学到很多，对高性能服务端开发感兴趣的读者一定要看看。&lt;/p&gt;

&lt;h3&gt;Web Server 中的处理&lt;/h3&gt;

&lt;p&gt;请求经过前面的负载均衡后，将进入到对应服务器上的 Web Server，比如 Apache、Tomcat、Node.JS 等。&lt;/p&gt;

&lt;p&gt;以 Apache 为例，在接收到请求后会交给一个独立的进程来处理，我们可以通过编写 Apache 扩展来处理，但这样开发起来太麻烦了，所以一般会调用 PHP 等脚本语言来进行处理，比如在 CGI 下就是将 HTTP 中的参数放到环境变量中，然后启动 PHP 进程来执行，或者使用 FastCGI 来预先启动进程。&lt;/p&gt;

&lt;p&gt;（等后续有空再单独介绍 Node.JS 中的处理）&lt;/p&gt;

&lt;h3&gt;进入后端语言&lt;/h3&gt;

&lt;p&gt;前面说到 Web Server 会调用后端语言进程来处理 HTTP 请求（这个说法不完全正确，有很多其它可能），那么接下来就是后端语言的处理了，目前大部分后端语言都是基于虚拟机的，如 PHP、Java、JavaScript、Python 等，但这个领域的话题非常大，难以讲清楚，对 PHP 感兴趣的读者可以阅读我之前写的 &lt;a href=&quot;http://fex.baidu.com/blog/2014/03/hvvm-and-php/&quot;&gt;HHVM 介绍文章&lt;/a&gt;，其中提到了很多虚拟机的基础知识。&lt;/p&gt;

&lt;h3&gt;Web 框架(Framework)&lt;/h3&gt;

&lt;p&gt;如果你的 PHP 只是用来做简单的个人主页「Personal Home Page」，倒没必要使用 Web 框架，但如果随着代码的增加会变得越来越难以管理，所以一般网站都会会基于某个 Web 框架来开发，因此在后端语言执行时首先进入 Web 框架的代码，然后由框架再去调用应用的实现代码。&lt;/p&gt;

&lt;p&gt;可选的 &lt;a href=&quot;http://www.techempower.com/benchmarks/&quot;&gt;Web 框架非常多&lt;/a&gt;，这里就不一一介绍了。&lt;/p&gt;

&lt;h3&gt;读取数据&lt;/h3&gt;

&lt;p&gt;这部分不展开了，从简单的读写文件到数据中间层，这里面可选的方案实在太多。&lt;/p&gt;

&lt;h3&gt;扩展学习&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/22793675/&quot;&gt;深入理解Nginx&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/3117898/&quot;&gt;Python源码剖析&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/24722612/&quot;&gt;深入理解Java虚拟机&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/4838430/&quot;&gt;数据库系统实现&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;第五个问题：服务器返回数据后浏览器如何处理？&lt;/h2&gt;

&lt;p&gt;前面说到服务端处理完请求后，结果将通过网络发回客户端的浏览器，从本节开始将介绍浏览器接收到数据后的处理，值得一提的是这方面之前有一篇不错的文章 &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/&quot;&gt;How Browsers Work&lt;/a&gt;，所以很多内容我不想再重复介绍，因此将重点放在那篇文章所忽略的部分。&lt;/p&gt;

&lt;h3&gt;从 01 到字符&lt;/h3&gt;

&lt;p&gt;HTTP 请求返回的 HTML 传递到浏览器后，如果有 gzip 会先解压，然后接下来最重要的问题是要知道它的编码是什么，比如同样一个「中」字，在 UTF-8 编码下它的内容其实是「11100100 10111000 10101101」也就是「E4 B8 AD」，而在 GBK 下则是「11010110 11010000」，也就是「D6 D0」，如何才能知道文件的编码？可以有很多判断方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用户设置，在浏览器中可以指定页面编码&lt;/li&gt;
&lt;li&gt;HTTP 协议中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 中的 charset 属性值&lt;/li&gt;
&lt;li&gt;对于 JS 和 CSS&lt;/li&gt;
&lt;li&gt;对于 iframe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果在这些地方都没指明，浏览器就很难处理，在它看来就是一堆「0」和「1」，比如「中文」，它在 UTF-8 下有 6 个字节，如果按照 GBK 可以当成「涓枃」这 3 个汉字来解释，浏览器怎么知道到底是「中文」还是「涓枃」呢？&lt;/p&gt;

&lt;p&gt;不过正常人一眼就能认出「涓枃」是错的，因为这 3 个字太不常见了，所以有人就想到通过判断常见字的方法来检测编码，典型的比如 Mozilla 的 &lt;a href=&quot;http://www-archive.mozilla.org/projects/intl/UniversalCharsetDetection.html&quot;&gt;UniversalCharsetDetection&lt;/a&gt;，不过这东东误判率也很高，所以还是指明编码的好。&lt;/p&gt;

&lt;p&gt;这样后续对文本的操作就是基于「字符」(Character)的了，一个汉字就是一个字符，不用再关心它究竟是 2 个字节还是 3 个字节。&lt;/p&gt;

&lt;h3&gt;外链资源的加载&lt;/h3&gt;

&lt;p&gt;（待补充，这里有调度策略）&lt;/p&gt;

&lt;h3&gt;JavaScript 的执行&lt;/h3&gt;

&lt;p&gt;（后续再单独介绍，推荐大家看 R 大去年整理的&lt;a href=&quot;http://hllvm.group.iteye.com/group/topic/37596&quot;&gt;这个帖子&lt;/a&gt;，里面有非常多相关资料，另外我两年前曾讲过 &lt;a href=&quot;http://www.slideshare.net/nwind/javascript-engine-performance&quot;&gt;JavaScript 引擎中的性能优化&lt;/a&gt;，虽然有些内容不太正确了，但也可以看看）&lt;/p&gt;

&lt;h3&gt;从字符到图片&lt;/h3&gt;

&lt;p&gt;二维渲染中最复杂的要数文字显示了，虽然想想似乎很简单，不就是将某个文字对应的字形(glyph)找出来么？在中文和英文中这样做是没问题的，因为一个字符就对应一个字形(glyph)，在字体文件中找到字形，然后画上去就可以了，但在阿拉伯语中是不行的，因为它有有连体形式。&lt;/p&gt;

&lt;p&gt;（以后续再单独介绍，这里非常复杂）&lt;/p&gt;

&lt;h3&gt;跨平台 2D 绘制库&lt;/h3&gt;

&lt;p&gt;在不同操作系统中都提供了自己的图形绘制 API，比如 Mac OS X 下的 Quartz，Windows 下的 GDI 以及 Linux 下的 Xlib，但它们相互不兼容，所以为了方便支持跨平台绘图，在 Chrome 中使用了 &lt;a href=&quot;https://github.com/google/skia&quot;&gt;Skia&lt;/a&gt; 库。&lt;/p&gt;

&lt;p&gt;（以后再单独介绍，Skia 内部实现调用层级太多，直接讲代码可能不适合初学者）&lt;/p&gt;

&lt;h3&gt;GPU 合成&lt;/h3&gt;

&lt;p&gt;（以后续再单独介绍，虽然简单来说就是靠贴图，但还得介绍 OpenGL 以及 GPU 芯片，内容太长）&lt;/p&gt;

&lt;h3&gt;扩展学习&lt;/h3&gt;

&lt;p&gt;这节内容是我最熟悉，结果反而因为这样才想花更多时间写好，所以等到以后再发出来好了，大家先可以先看看以下几个站点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.chromium.org/developers&quot;&gt;Chromium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/&quot;&gt;Mozilla Hacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.webkit.org/blog/&quot;&gt;Surfin&amp;#39; Safari&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;第六个问题：浏览器如何将页面展现出来？&lt;/h2&gt;

&lt;p&gt;前面提到浏览器已经将页面渲染成一张图片了，接下来的问题就是如何将这张图片展示在屏幕上。&lt;/p&gt;

&lt;h3&gt;Framebuffer&lt;/h3&gt;

&lt;p&gt;以 Linux 为例，在应用中控制屏幕最直接的方法是将图像的 bitmap 写入 &lt;code&gt;/dev/fb0&lt;/code&gt; 文件中，这个文件实际上一个内存区域的映射，这段内存区域称为 Framebuffer。&lt;/p&gt;

&lt;p&gt;需要注意的是在硬件加速下，如 OpenGL 是不经过 Framebuffer 的。&lt;/p&gt;

&lt;h3&gt;从内存到 LCD&lt;/h3&gt;

&lt;p&gt;在手机的 SoC 中通常都会有一个 LCD 控制器，当 Framebuffer 准备好后，CPU 会通过 &lt;a href=&quot;http://en.wikipedia.org/wiki/Advanced_Microcontroller_Bus_Architecture&quot;&gt;AMBA&lt;/a&gt; 内部总线通知 LCD 控制器，然后这个控制器读取 Framebuffer 中的数据，进行格式转换、伽马校正等操作，最终通过 &lt;a href=&quot;http://mipi.org/specifications/display-interface&quot;&gt;DSI&lt;/a&gt;、HDMI 等接口发往 LCD 显示器。&lt;/p&gt;

&lt;p&gt;以 &lt;a href=&quot;http://www.ti.com/product/omap5432&quot;&gt;OMAP5432&lt;/a&gt; 为例，下图是它所支持的一种并行数据传输：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/what-happen/DISPC-color24.png&quot; alt=&quot;DISPC-color24&quot;&gt;&lt;/p&gt;

&lt;h3&gt;LCD 显示&lt;/h3&gt;

&lt;p&gt;最后简单介绍一下 LCD 的显示原理。&lt;/p&gt;

&lt;p&gt;首先，要想让人眼能看见，就必须有光线进入，要么通过反射、要么有光源，比如 Kindle 所使用的 E-ink 屏幕本身是不发光的，所以必须在有光线的地方才能阅读，它的优点是省电，但限制太大，所以几乎所有 LCD 都会自带光源。&lt;/p&gt;

&lt;p&gt;目前 LCD 中通常使用 &lt;a href=&quot;http://en.wikipedia.org/wiki/Light-emitting_diode&quot;&gt;LED&lt;/a&gt; 作为光源，LED 接上电源后，在电压的作用下，内部的正负电子结合会释放光子，从而产生光，这种物理现象叫电致发光(Electroluminescence)，这在前面介绍光纤时也介绍过。&lt;/p&gt;

&lt;p&gt;以下是 iPod Touch 2 拆开后的样子：（来自 &lt;a href=&quot;http://en.wikipedia.org/wiki/File:IPod_Touch_2G_Backlight.JPG&quot;&gt;Wikipedia&lt;/a&gt;）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/what-happen/IPod_Touch_2G_Backlight.jpg&quot; alt=&quot;IPod_Touch_2G_Backlight.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;在上图中可以看到 6 盏 LED，这就是整个屏幕的光源，这些光源将通过反射的反射输出到屏幕中。&lt;/p&gt;

&lt;p&gt;有了光源还得有色彩，在 LED 中通常做法是使用彩色滤光片(Color filter)来将 LED 光源转成不同颜色。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;另外直接使用三种颜色的 LED 也是可行的，它能避免了滤光导致的光子浪费，降低耗电，很适用于智能手表这样的小屏幕，Apple 收购的 LuxVue 公司就采用的是这种方式，感兴趣的话可以去研究它的&lt;a href=&quot;http://www.faqs.org/patents/assignee/luxvue-technology-corporation/&quot;&gt;专利&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;LCD 屏幕上的每个物理像素点实际上是由红、绿、蓝 3 种色彩的点组成，每个颜色点能单独控制，下面是用显微镜放大后的情况（来自 &lt;a href=&quot;http://zh.wikipedia.org/wiki/File:Liquid_Crystal_Display_Macro_Example_zoom.jpg&quot;&gt;Wikipedia&lt;/a&gt;）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/what-happen/Liquid_Crystal_Display_Macro_Example_zoom_x1.jpg&quot; alt=&quot;Wikipedia 上的图片解释&quot;&gt;&lt;/p&gt;

&lt;p&gt;从上图可以看到每 3 种颜色的滤光片都全亮的时候就是白色，都灭就是黑色，如果你仔细看还能看到有些点并不是完全黑，这是字体上的反锯齿效果。&lt;/p&gt;

&lt;p&gt;通过这 3 种颜色亮度的不同组合就能产生出各种色彩，如果每个颜色点能产生 256 种亮度，就能生成 256 * 256 * 256 = 16777216 种色彩。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;并不是所有显示器的亮度都能达到 256，在选择显示器时有个参数是 8-Bit 或 6-Bit 面板，其中 8-Bit 的面板能在物理上达到 256 种亮度，而 6-Bit 的则只有 64 种，它需要靠刷新率控制(&lt;a href=&quot;http://en.wikipedia.org/wiki/Frame_rate_control&quot;&gt;Frame rate control&lt;/a&gt;)技术来达到 256 的效果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如何控制这些颜色点的亮度？这就要靠液晶体了，液晶体的特性是当有电流通过时会发生旋转，从而将部分光线挡住，所以只要通过电压控制液晶体的转动就能控制这个颜色点的亮度，目前手机屏幕中通常使用 TFT 控制器来对其进行控制，在 TFT 中最著名的要数 IPS 面板。&lt;/p&gt;

&lt;p&gt;这些过滤后的光线大部分会直接进入眼睛，有些光还会在其它表面上经过漫(diffuse)反射或镜面(specular)反射后再进入眼睛，加上环境光的影响，要真正算出有多少光到眼睛是一个积分问题，感兴趣的读者可以研究&lt;a href=&quot;http://www.amazon.com/Physically-Based-Rendering-Second-Edition/dp/0123750792&quot;&gt;基于物理的渲染&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;当光线进入眼睛后，接下来就是生物学的领域了，所以我们到此结束。&lt;/p&gt;

&lt;h3&gt;扩展学习&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/4770734/&quot;&gt;Computer Graphics, 3rd Edition : Principles and Practices&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《&lt;a href=&quot;http://book.douban.com/subject/10777165/&quot;&gt;交互式计算机图形学&lt;/a&gt;》&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;本文所忽略的内容&lt;/h2&gt;

&lt;p&gt;为了编写方便，前面的介绍中将很多底层细节实现忽略了，比如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;内存相关

&lt;ul&gt;
&lt;li&gt;堆，这里的分配策略有很多，比如 malloc &lt;a href=&quot;https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;hb=HEAD&quot;&gt;的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;栈，函数调用，已经有很多优秀的文章或书籍介绍了&lt;/li&gt;
&lt;li&gt;内存映射，动态库加载等&lt;/li&gt;
&lt;li&gt;队列几乎无处不在，但这些细节和原理没太大关系&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;各种缓存

&lt;ul&gt;
&lt;li&gt;CPU 的缓存、操作系统的缓存、HTTP 缓存、后端缓存等等&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;各种监控

&lt;ul&gt;
&lt;li&gt;很多日志会保存下来以便后续分析&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;FAQ&lt;/h2&gt;

&lt;p&gt;从微博反馈来看，有些问题被经常问到，我就在这里统一回答吧，如果有其它问题请在评论中问。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q：学那么多有什么用？根本用不着&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A：计算机是人类最强大的工具，你不想了解它是如何运作的么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q：什么都了解一点，还不如精通一项吧？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A：非常认同，初期肯定需要先在某个领域精通，然后再去了解周边领域的知识，这样还能让你对之前那个领域有更深刻的理解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q：晒出来培养一堆面霸跟自己过不去？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A：本文其实写得很浅，每个部分都能再深入展开。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q：这题要把人累死啊，说几天都说不完的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A：哈哈哈，大神你暴露了，题目只是手段，目的是将你这样的大牛挖掘出来。&lt;/p&gt;

&lt;h2&gt;大家的讨论&lt;/h2&gt;

&lt;p&gt;非常感谢各位大牛的参与讨论，这里搜集了其中的一些回答。&lt;/p&gt;

&lt;p&gt;@WOODHEAD笨笨:请求被送往本地路由，接入商路由，旁路分析是否违法地址，连接被中断，浏览器无辜得显示网页不存在。严重的有人来查水表&lt;/p&gt;

&lt;p&gt;caoz: 这不是我的面试题么！ 还有一道题，用户反应我们网站卡，请问都有哪些可能性，以及排方法。&lt;/p&gt;

&lt;p&gt;@caoz:写的还是不错的，但是还是有一些缺漏，比如arp欺骗？ 著名的GFW的阻断策略，以及，一个URL可不是只有一个请求，多个请求的排队和寻址？此外，cdn, 智能dns解析机制等。//@ZRJ-: &lt;a href=&quot;http://t.cn/8smHpMF&quot;&gt;http://t.cn/8smHpMF&lt;/a&gt; 从点击到呈现 — 详解一次HTTP请求 我大三的时候写的。。 啊&lt;/p&gt;

&lt;p&gt;@唐福林:与时俱进，现在应该问从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决&lt;/p&gt;

&lt;p&gt;@寒冬winter: 回复@Ivony:这题胜在区分度高，知识点覆盖均匀，再不懂的人，也能答出几句，而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定⋯⋯&lt;/p&gt;

&lt;p&gt;@JS小组:[哈哈] 小编想起来了,貌似刚从业那会儿,前端界最美丽的姐@sherrie_wong 面试问过小编这道题.然后我当时把知道的全说了,从浏览器解析,发请求,7层网络模型实际用的模型,TCP三次握手.经路由,交换机,DNS,到服务器.在是否需要与文件系统还是数据库打交道,再者分布式运算hadoop啥的...聊了太多.&lt;/p&gt;

&lt;p&gt;@莴怖熵崴箔:这种就是流氓问题，我还想问从你按了键盘到屏幕上出现字符，中间都发生了什么事，提示一下：设想你是一个电子。哦，不对，电子又是什么&lt;/p&gt;

&lt;p&gt;@寒冬winter:&lt;a href=&quot;http://t.cn/zH20bR1&quot;&gt;http://t.cn/zH20bR1&lt;/a&gt; &lt;a href=&quot;http://t.cn/zH20bR1&quot;&gt;http://t.cn/zH20bR1&lt;/a&gt; 之前写了开头两篇，后面荒废中⋯⋯&lt;/p&gt;

&lt;p&gt;@ils传言:不提电厂发电机转了几圈的也干掉！//@Philonis高:不提交换机和路由器工作原理的全干掉！//@南非蜘蛛:从7层协议的角度说会比较全面。这种问题只有全栈工程师才能回答。&lt;/p&gt;

&lt;p&gt;@耸肩的阿特拉斯阁下:DNS解析URL出IP/Port，浏览器连接并向此地址发出GET请求，web服务端(nginx、apache)接收到请求后，通过CGI等接口协议调用动态语言(php等)，动态语言再连接数据库查询相应数据并处理，然后反馈给浏览器，浏览器解析反馈页面，通过html、javascript、css处理后呈现到屏幕⋯⋯每个细节的话估计要800页的书&lt;/p&gt;

&lt;p&gt;@一棹凌烟:这种面试题在系统领域的招聘里其实简单好使。还有一个类似的：从在键盘上敲下一个字符键开始，到在虚拟机里的terminal里显示出来，中间的过程是什么？&lt;/p&gt;

&lt;p&gt;@ICT_朱亚东:记得6年前上胡伟武的芯片设计课，老胡第一节课就说，上完这门课，我希望你们能搞清楚，我翻了一页PPT，计算机内部都做了那些流水操作，当然啦，我是一点都不记得了。&lt;/p&gt;

&lt;p&gt;@julyclyde:我们运维一般问一个TCP segment in a IP packet in an ethernet frame经过一个路由器之后发生什么变化&lt;/p&gt;

&lt;p&gt;@西西福厮:从浏览器说起，操作系统相应键盘中断，事件队列处理，到互联网路由，到服务器网卡中断，到最后输出缓冲。。。细说能说两小时。&lt;/p&gt;

&lt;p&gt;@Xscape:从键盘中断说起？回车前的预解析都很靠后了..//@纯白色燃烧: 从键盘到弹簧入万有引力而后直达量子力学。 &lt;/p&gt;

&lt;p&gt;@Bosn:然后从硬件再到电子⋯⋯量子…薛定谔之猫…平行宇宙⋯⋯乃至万能的哲学！！&lt;/p&gt;

&lt;p&gt;@imPony:可深入到PN结中的电子流动层面&lt;/p&gt;

&lt;p&gt;@巩小东-TX: 猜一下，浏览器组http报文sock发出，proxy过滤，收到处理头，未过期cache返回，http svr处理校验包，转为cgi协议给后端，后端map url，load code，与逻辑交互后生成html给svr，svr过滤cache给proxy，proxy给浏览器，拉去js完成html，浏览器渲染。&lt;/p&gt;

&lt;p&gt;@yuange1975:我算对整个过程比较清楚，包含服务器的处理，web服务器和浏览器的处理以及安全问题，估计少有对两者的安全都研究过的。但面试时要清晰的比较完整的把大块流程列出来说明白，也有难度。估计也很难有机会时间去整理文章了。&lt;/p&gt;

&lt;p&gt;@ShopEx王磊:我也问这个问题题好多年, 或者变通一下：从输入URL到展现， 都涉及到哪些缓存环节， 缓存的更新机制是怎样的 &lt;/p&gt;

&lt;p&gt;@一棹凌烟:这种面试题在系统领域的招聘里其实简单好使。还有一个类似的：从在键盘上敲下一个字符键开始，到在虚拟机里的terminal里显示出来，中间的过程是什么？&lt;/p&gt;

&lt;p&gt;@智慧笨蛋: 确实可以维度不同的说，主要还是看颗粒度，光网络这段从wifi 解密，到NAT，到局间交换，ip包在以太网包映射等等就可以写一本书了&lt;/p&gt;

&lt;p&gt;/@乔3少:放开了说所有互联网相关的知识都能体现的，比如dns、浏览器缓存，tcp连接、http响应，web服务的工作原理，浏览器的响应和渲染等等，刚刚在本子上列了下想到的安全威胁，很有意思！&lt;/p&gt;

&lt;h2&gt;最后&lt;/h2&gt;

&lt;p&gt;细心的读者应该会发现本文有隐藏内容，请找。。。&lt;/p&gt;
</description>
                <pubDate>Sat, 24 May 2014 00:00:00 +0800</pubDate>
                <link>http://fex.baidu.com/blog/2014/05/what-happen</link>
                <guid isPermaLink="true">http://fex.baidu.com/blog/2014/05/what-happen</guid>
            </item>
        
            <item>
                <title>7 天打造前端性能监控系统</title>
                <description>作者：zhangtao &lt;br&gt; &lt;h2&gt;引言&lt;/h2&gt;

&lt;p&gt;前阵子在&lt;a href=&quot;http://www.w3ctech.com/&quot;&gt;w3ctech&lt;/a&gt;的&lt;a href=&quot;http://www.w3ctech.com/event/34&quot;&gt;走进名企 - 百度前端 FEX 专场&lt;/a&gt;上曾“夸下海口”说听完讲座后七天就可以打造自己的前端性能监控系统，既然说出去了也不能食言。从前一篇文章&lt;a href=&quot;http://fex.baidu.com/blog/2014/05/front_end-data/&quot;&gt;前端数据之美&lt;/a&gt;相信大家对前端数据有了一定的了解，下面就针对其中的性能数据及其监控进行详细阐述。&lt;/p&gt;

&lt;h2&gt;开始行动&lt;/h2&gt;

&lt;p&gt;本文中的性能主要指 web 页面加载性能，对性能还不了解？不用担心，接下来的“每一天”跟我一起进入前端性能的世界。&lt;/p&gt;

&lt;h3&gt;Day 1 为什么要监控性能？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;“If you cannot measure it, you cannot improve it”   ———— William Thomson&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是一个最基本的问题，为什么要关注和监控前端性能？对于公司来说，性能在一定程度上与利益直接相关。国外有很多这方面的调研数据：&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;性能&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;收益&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Google 延迟 &lt;strong&gt;400ms&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;搜索量下降 &lt;strong&gt;0.59%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Bing 延迟 &lt;strong&gt;2s&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;收入下降 &lt;strong&gt;4.3%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Yahoo 延迟 &lt;strong&gt;400ms&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;流量下降 &lt;strong&gt;5-9%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Mozilla 页面打开减少 &lt;strong&gt;2.2s&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;下载量提升 &lt;strong&gt;15.4%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Netflix 开启 Gzip&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;性能提升 13.25% 带宽减少&lt;strong&gt;50%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;数据来源：&lt;a href=&quot;http://www.slideshare.net/bitcurrent/impact-of-web-latency-on-conversion-rates&quot;&gt;http://www.slideshare.net/bitcurrent/impact-of-web-latency-on-conversion-rates&lt;/a&gt;  &lt;a href=&quot;http://stevesouders.com/docs/jsdayit-20110511.pptx&quot;&gt;http://stevesouders.com/docs/jsdayit-20110511.pptx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;为什么性能会影响公司的收益呢？根本原因还是在于&lt;strong&gt;性能影响了用户体验&lt;/strong&gt;。加载的延迟、操作的卡顿等都会影响用户的使用体验。尤其是移动端，用户对页面响应延迟和连接中断的容忍度很低。想象一下你拿着手机打开一个网页想看到某个信息却加载半天的心情，你很可能选择直接离开换一个网页。谷歌也将页面加载速度作为 SEO 的一个权重，页面加载速度对用户体验和 SEO 的影响的调研有&lt;a href=&quot;http://www.webpronews.com/how-page-load-speed-impacts-seo-and-user-experience-2013-04&quot;&gt;很多&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;尽管性能很重要，开发迭代过程中难免会有所忽视，&lt;strong&gt;性能会伴随产品的迭代而有所衰减&lt;/strong&gt;。特别在移动端，网络一直是一个很大的瓶颈，而页面却越来越大，功能越来越复杂。并没有简单的几条黄金规则就可以搞定性能优化工作，我们需要一套性能监控系统持续监控、评估、预警页面性能状况、发现瓶颈，指导优化工作的进行。&lt;/p&gt;

&lt;h3&gt;Day 2 有什么可用的工具？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;工欲善其事必先利其器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;页面性能的评估与监控有很多成熟优秀的工具，合理利用已有工具能达到事半功倍的效果。下面简单介绍几个常用的工具：&lt;/p&gt;

&lt;h4&gt;Page Speed&lt;/h4&gt;

&lt;p&gt;Page Speed 是谷歌开发的分析和优化网页的工具，可以作为浏览器插件使用。工具基于一系列优化规则对网站进行检测，对于未通过的规则会给出详细的建议。与此类似的工具还有 Yslow 等，推荐使用&lt;a href=&quot;http://gtmetrix.com/&quot;&gt;gtmetrix&lt;/a&gt;网站同时查看多个分析工具的结果，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/build-performance-monitor-in-7-days/gtmetrix.png&quot; alt=&quot;gtmetrix&quot;&gt;&lt;/p&gt;

&lt;h4&gt;WebPagetest&lt;/h4&gt;

&lt;p&gt;WebPageTest 是一款非常优秀的网页前端性能测试工具,已&lt;a href=&quot;https://github.com/WPO-Foundation/webpagetest&quot;&gt;开源&lt;/a&gt;。可以使用&lt;a href=&quot;http://www.webpagetest.org/&quot;&gt;在线版&lt;/a&gt;，也可以自己搭建。国内也有利用 WebPagetest 搭建的性能测试平台，推荐使用&lt;a href=&quot;http://alibench.com/&quot;&gt;阿里测&lt;/a&gt; (以下示例使用阿里测进行测试)。&lt;/p&gt;

&lt;p&gt;使用 WebPagetest，你可以详细掌握网站加载过程中的瀑布流、性能得分、元素分布、视图分析等数据。其中比较直观的视图分析功能可以直接看到页面加载各个阶段的截屏:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/build-performance-monitor-in-7-days/webpagetest.png&quot; alt=&quot;webpagetest&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;注&lt;/code&gt;: 整个测试结果请点击&lt;a href=&quot;http://alibench.com/rp/ca2e5911093626aacb0b136f5d55ced0&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上图直观地展现了浏览类网站两个重要的时间点：白屏时间和首屏时间，即用户多久能在页面中看到内容，以及多久首屏渲染完成(包含图片等元素加载完成)。这两个时间点直接决定了用户需要等待多久才能看到自己想看到的信息。谷歌优化建议中也提到减少非首屏使用的 css 及 JS,尽快让首屏呈现。&lt;/p&gt;

&lt;h4&gt;PhantomJS&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;轻松地将监控带入了自动化的行列。Phantom JS 是一个服务器端的 JavaScript API 的 WebKit，基于它可以轻松实现 web 自动化测试。PhantomJS 需要一定编程工作，但也更灵活。官方文档中已经有一个完整的获取网页加载 har 文件的示例，具体说明可以查看&lt;a href=&quot;https://github.com/ariya/phantomjs/wiki/Network-Monitoring&quot;&gt;此文档&lt;/a&gt;，国内也有不少关于此工具的介绍。另外新浪&lt;a href=&quot;http://weibo.com/itapir&quot;&gt;@貘吃馍香&lt;/a&gt;开发的类似工具&lt;strong&gt;berserkJS&lt;/strong&gt;也挺不错，还贴心的提供了&lt;strong&gt;首屏统计&lt;/strong&gt;的功能，具体文章可以查看&lt;a href=&quot;http://tech.weibo.com/?p=2150&quot;&gt;此处&lt;/a&gt;。&lt;/p&gt;

&lt;h3&gt;Day 3 开始线上真实用户性能监控&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;取其所长，避其所短&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;到此肯定有同学问，既然有这么多优秀的工具，为什么要监控线上用户真实访问性能呢？&lt;/p&gt;

&lt;p&gt;我们发现，工具模拟测试会在一定程度上与&lt;strong&gt;真实情况偏离&lt;/strong&gt;，有时无法反映性能的波动情况。另外除了白屏首屏之类的基础指标，产品线同样关注&lt;strong&gt;产品相关的指标&lt;/strong&gt;，例如广告可见、搜索可用、签到可用等，这些功能直接与页面 JS 加载相关,通过工具较难模拟。&lt;/p&gt;

&lt;p&gt;为了持续监控不同网络环境下用户访问情况与页面各功能可用状况，我们选择在页面中植入 JS 来监控线上真实用户访问性能，同时利用已有的分析工具作为辅助，形成一套完整多元的数据监控体系，为产品线的评估与优化提供可靠的数据。&lt;/p&gt;

&lt;p&gt;关于不同监控方式的简单对比可以查看下表：&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;优点&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;缺点&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;非侵入式&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;指标齐全、客户端主动监测、竞品监控&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;无法知道性能影响用户数、采样少容易失真、无法监控复杂应用与细分功能&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Pagespeed、PhantomJS、UAQ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;侵入式&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;真实海量用户数据、能监控复杂应用与业务功能、用户点击与区域渲染&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;需插入脚本统计、网络指标不全、无法监控竞品&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;DP 、Google 统计&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;Day 4 如何采集性能数据？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;监控用户的痛点&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;线上监控哪些指标呢？如何更好地反映用户感知？&lt;/p&gt;

&lt;p&gt;对于用户来说他感觉到的为什么页面打不开、为什么按钮点击不了、为什么图片显示这么慢。而对于工程师来说，可能关注的是 DNS 查询、TCP 连接、服务响应等浏览器加载过程指标。我们根据用户的痛点，将浏览器加载过程抽取出四个关键指标，即白屏时间、首屏时间、用户可操作、总下载时间(定义可见&lt;a href=&quot;http://fex.baidu.com/blog/2014/05/front_end-data/&quot;&gt;上篇文章&lt;/a&gt;)。这些指标是如何统计的呢？&lt;/p&gt;

&lt;h4&gt;确定统计起点&lt;/h4&gt;

&lt;p&gt;我们需要在用户输入 URL 或者点击链接的时候就开始统计，因为这样才能衡量用户的等待时间。如果你的用户高端浏览器占比很高，那么可以直接使用&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webperformance/basics/?redirect_from_locale=zh&quot;&gt;Navigation Timing&lt;/a&gt;接口来获取统计起点以及加载过程中的各个阶段耗时。另外也可以通过 cookie 记录时间戳的方式来统计，需要注意的是 Cookie 方式只能统计到站内跳转的数据。&lt;/p&gt;

&lt;h4&gt;统计白屏时间&lt;/h4&gt;

&lt;p&gt;白屏时间是用户首次看到内容的时间，也叫做首次渲染时间，chrome 高版本有 firstPaintTime 接口来获取这个耗时，但大部分浏览器并不支持，必须想其他办法来监测。仔细观察 WebPagetest 视图分析发现，白屏时间出现在&lt;strong&gt;头部外链资源加载完&lt;/strong&gt;附近，因为浏览器只有加载并解析完头部资源才会真正渲染页面。基于此我们可以通过获取头部资源加载完的时刻来近似统计白屏时间。尽管并不精确，但却考虑了影响白屏的主要因素：首字节时间和头部资源加载时间。&lt;/p&gt;

&lt;p&gt;如何统计头部资源加载呢？我们发现头部内嵌的 JS 通常需等待前面的 JS\CSS 加载完才会执行，是不是可以在浏览器 head 内底部加一句 JS 统计头部资源加载结束点呢？可以通过一个简单的示例进行测试：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//测试时间起点，实际统计起点为 DNS 查询&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 3s 后这个 js 才会返回 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;script.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//时间终点&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//头部资源加载时间    &lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;     
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;在头部资源加载完之前页面将是白屏&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;script.php 被模拟设置 3s 后返回，head 底部内嵌 JS 等待前面 js 返回后才执行&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;script.php 替换成一个执行长时间循环的 js 效果也一样&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经测试发现，统计的头部加载时间正好跟头部资源下载时间相近，而且换成一个执行时间很长的 JS 也会等到 JS 执行完才统计。说明此方法是可行的(具体原因可查看浏览器渲染原理及 JS 单线程相关介绍)。&lt;/p&gt;

&lt;h4&gt;统计首屏时间&lt;/h4&gt;

&lt;p&gt;首屏时间的统计比较复杂，因为涉及图片等多种元素及异步渲染等方式。观察加载视图可发现，影响首屏的主要因素的图片的加载。通过统计首屏内图片的加载时间便可以获取首屏渲染完成的时间。统计流程如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;首屏位置调用 API 开始统计 -&amp;gt; 绑定首屏内所有图片的 load 事件 -&amp;gt; 页面加载完后判断图片是否在首屏内，找出加载最慢的一张 -&amp;gt; 首屏时间
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是同步加载情况下的简单统计逻辑，另外需要注意的几点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;页面存在 iframe 的情况下也需要判断加载时间&lt;/li&gt;
&lt;li&gt;gif 图片在 IE 上可能重复触发 load 事件需排除&lt;/li&gt;
&lt;li&gt;异步渲染的情况下应在异步获取数据插入之后再计算首屏&lt;/li&gt;
&lt;li&gt;css 重要背景图片可以通过 JS 请求图片 url 来统计(浏览器不会重复加载)&lt;/li&gt;
&lt;li&gt;没有图片则以统计 JS 执行时间为首屏，即认为文字出现时间&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;统计用户可操作和总下载&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;用户可操作&lt;/strong&gt;默认可以统计&lt;strong&gt;domready&lt;/strong&gt;时间，因为通常会在这时候绑定事件操作。对于使用了模块化异步加载的 JS 可以在代码中去主动标记重要 JS 的加载时间，这也是产品指标的统计方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总下载时间&lt;/strong&gt;默认可以统计&lt;strong&gt;onload&lt;/strong&gt;时间，这样可以统计同步加载的资源全部加载完的耗时。如果页面中存在很多异步渲染，可以将异步渲染全部完成的时间作为总下载时间。&lt;/p&gt;

&lt;h4&gt;网络指标&lt;/h4&gt;

&lt;p&gt;网络类型判断&lt;/p&gt;

&lt;p&gt;对于移动端来说，网络是页面加载速度最大的影响因素，需要根据不同的网络来采取相应的优化措施，例如对于 2G 用户采用简版等。但 web 上没有接口获取用户的网络类型。为了获取用户网络类型，可以通过测速的方式来判断不同 IP 段对应的网络。测速例如比较经典的有 facebook 的&lt;a href=&quot;http://velocity.oreilly.com.cn/2011/ppts/MobilePerformanceVelocity2011_DavidWei.pdf&quot;&gt;方案&lt;/a&gt;。经过测速后的分析，用户的加载速率有明显的分布区间，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/build-performance-monitor-in-7-days/net.png&quot; alt=&quot;gtmetrix&quot;&gt;&lt;/p&gt;

&lt;p&gt;各个分布区间正好对应不同的网络类型，经过与客户端的辅助测试，成功率可以在 95%以上。有了这个 IP 库对应的速率数据，就可以在分析用户数据时根据 IP 来判断用户网络类型。&lt;/p&gt;

&lt;p&gt;网络耗时统计&lt;/p&gt;

&lt;p&gt;网络耗时数据可以借助前面提到 Navigation Timing 接口获取，与之类似的还有&lt;a href=&quot;http://www.w3.org/TR/2014/CR-resource-timing-20140325/&quot;&gt;Resource Timing&lt;/a&gt;,可以获取页面所有静态资源的加载耗时。通过此接口可以轻松获取 DNS、TCP、首字节、html 传输等耗时，Navigation Timing 的接口示意图如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/build-performance-monitor-in-7-days/timing.png&quot; alt=&quot;gtmetrix&quot;&gt;&lt;/p&gt;

&lt;p&gt;以上重点介绍了数据采集部分，这也是系统中最关键的一部分，只有保证数据能真实反映用户感知，才能对症下药提升用户体验。数据采集完之后我们可以在页面加载完之后统一上报，如示例：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http://xxx.baidu.com/tj.gif?dns=100&amp;amp;ct=210&amp;amp;st=300&amp;amp;tt=703&amp;amp;c_dnslookup=0&amp;amp;c_connecting=0&amp;amp;c_waiting=296&amp;amp;c_receiving=403&amp;amp;c_fetch_dns=0&amp;amp;c_nav_dns=75&amp;amp;c_nav_fetch=75&amp;amp;drt=1423&amp;amp;drt_end=1436&amp;amp;lt=3410&amp;amp;c_nfpt=619&amp;amp;nav_type=0&amp;amp;redirect_count=0&amp;amp;_screen=1366*768|1366*728&amp;amp;product_id=10&amp;amp;page_id=200&amp;amp;_t=1399822334414
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Day 5 如何分析性能数据？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;让数据会说话&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而数据分析过程，如前一篇文章所述，可以从多个维度去分析数据。大数据处理需要借助 hadoop、Hive 等方式，而对于普通站点则任意一种后端语言处理即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;均值与分布&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;均值与分布是数据处理中最常见的两种方式。因为它能直观的表示指标的趋势与分布状况，方便进行评估、瓶颈发现与告警。处理过程中应去除异常值，例如明显超过阈值的脏数据等。&lt;/p&gt;

&lt;p&gt;耗时的评估中，有很多这方面的研究数据。例如&lt;a href=&quot;http://www.nngroup.com/articles/response-times-3-important-limits/&quot;&gt;有人提出&lt;/a&gt;三个基本的时间范围：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;0.1秒&lt;/strong&gt; : 0.1 秒是用户感知的最小粒度，在这个时间范围内完成的操作被认为是流畅没有延迟的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1.0秒&lt;/strong&gt; : 1.0 秒内完成的响应认为不会干扰用户的思维流。尽管用户能感觉到延迟，但 0.1 秒 -1.0 秒内完成的操作并不需要给出明显 loading 提示&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;10秒&lt;/strong&gt;  : 达到 10 秒用户将无法保持注意力，很可能选择离开做其他事情&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们根据业界的一些调研，结合不同指标的特点，制定了指标的分布评估区间。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/build-performance-monitor-in-7-days/portion.png&quot; alt=&quot;gtmetrix&quot;&gt;&lt;/p&gt;

&lt;p&gt;评估区间的制定方便我们了解当前性能状况，同时对性能趋势波动做出反应。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;多维分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了方便挖掘性能可能的瓶颈，需要从多维的角度对数据进行分析。例如移动端最重要的维度就是网络，数据处理上除了总体数据，还需要根据网络类型对数据进行分析。常见的维度还有系统、浏览器、地域运营商等。我们还可以根据自身产品的特点来确定一些维度，例如页面长度分布、简版炫版等。&lt;/p&gt;

&lt;p&gt;需要注意的是维度并不是越多越好，需要根据产品的特点及终端来确定。&lt;strong&gt;维度是为了方便查找性能瓶颈&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;小插曲&lt;/strong&gt; ：之前从微博中看到有人评价说想做监控但是公司&lt;strong&gt;没有日志服务器&lt;/strong&gt;。并不需要单独的日志服务器,只要能把统计的这个请求访问日志保存下来即可。如果网站自己的独立服务器都没有还有解决办法，在&lt;a href=&quot;http://developer.baidu.com/&quot;&gt;百度开发者中心&lt;/a&gt;新建一个应用，写一个简单的 Web 服务将接收到的统计数据解析存到百度云免费的数据库中，然后每天再用 Mysql 处理下当天的数据即可，对于普通站点的抽样性能数据应该没问题。请叫我雷锋。&lt;/p&gt;

&lt;h3&gt;Day 6 如何利用监控数据解决问题？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;发现瓶颈，对症下药&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于图表制作，比较出名的有&lt;a href=&quot;http://www.highcharts.com/&quot;&gt;Highcharts&lt;/a&gt;，百度开发的&lt;a href=&quot;http://echarts.baidu.com/&quot;&gt;Echarts&lt;/a&gt;也很不错。不管使用什么工具，最关键的一点就是让报表能&lt;strong&gt;突出重点，直观明了&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;制作报表前多问几个如何让人直观看到目前状况和可能存在的问题，哪些地方可以加强，哪些可以去掉，使用是否习惯等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/build-performance-monitor-in-7-days/rank.png&quot; alt=&quot;gtmetrix&quot;&gt;&lt;/p&gt;

&lt;p&gt;有了能反映用户感知的真实世界、并且细分到各个业务功能，有详细的网络等辅助数据，我们在解决前端性能上便更加得心应手。监控系统已经对线上访问状况有了连续的反馈，根据现有评估与瓶颈选择对应方案进行优化，最后根据反馈进行调整，相信性能优化不再是个难题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如何选择优化方案呢&lt;/strong&gt;？这又是一个比较大的话题了，好在已经有很多经验可以借鉴。附录中就整理了部分&lt;strong&gt;性能的学习资料&lt;/strong&gt;，可以根据需要阅读学习。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/build-performance-monitor-in-7-days/solution.png&quot; alt=&quot;gtmetrix&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Day 7 总结&lt;/h3&gt;

&lt;p&gt;通过以上“几天”的努力，我们可以搭建一个小而美的前端性能监控系统。但这仅仅是开始，前端数据有很多挖掘的价值。性能优化也是一门需要认真学习的课程，为了打造流畅的使用体验，为了让用户更加满意，赶紧搭建起自己的前端数据平台吧!&lt;/p&gt;

&lt;p&gt;该文写在&lt;a href=&quot;http://www.w3ctech.com/&quot;&gt;w3ctech&lt;/a&gt;的&lt;a href=&quot;http://www.w3ctech.com/event/34&quot;&gt;走进名企 - 百度前端 FEX 专场&lt;/a&gt;之后，分享时的 PPT 在&lt;a href=&quot;https://speakerdeck.com/baidufe/bai-du-qian-duan-ji-chu-shu-ju-ping-tai-jie-shao&quot;&gt;这里&lt;/a&gt;，视频在&lt;a href=&quot;http://v.youku.com/v_show/id_XNjk2NDYyNDI0.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;华丽非分割线&lt;/strong&gt; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/p&gt;

&lt;h2&gt;福利——前端性能学习资料整理&lt;/h2&gt;

&lt;h3&gt;性能准则  &lt;code&gt;★★★★★&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/performance/rules.html&quot;&gt;雅虎性能军规&lt;/a&gt;、&lt;a href=&quot;http://www.cnblogs.com/li0803/archive/2009/09/20/1570581.html&quot;&gt;中文文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/articles/&quot;&gt;谷歌性能优化文章&lt;/a&gt; 推荐&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;分析工具 &lt;code&gt;★★★&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;入门&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/pagespeed/&quot;&gt;pageSpeed&lt;/a&gt; 基于谷歌性能准则的检测，可浏览器安装插件运行&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.yslow.net/show.php?tid=123&quot;&gt;Yslow&lt;/a&gt; 基于雅虎性能准则的检测工具，可浏览器安装插件运行&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fe.baidu.com/pagecheck/&quot;&gt;pageCheck&lt;/a&gt; 百度内部开发，指标齐全，支持自动运行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;进阶&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webpagetest.org/&quot;&gt;webPageTest&lt;/a&gt; 查看页面加载瀑布流等数据，进阶必备工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coding.smashingmagazine.com/2012/06/12/javascript-profiling-chrome-developer-tools/&quot;&gt;Chrome 开发者工具&lt;/a&gt; 功能强大，值得学习&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; 功能强大的分析工具，高手必备瑞士军刀&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jsperf.com/&quot;&gt;JsPerf&lt;/a&gt; JS 执行性能分析网站，谁用谁知道&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;浏览器与 Html 标准 &lt;code&gt;★★&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;入门&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mangguo.org/browser-cache-mechanism-detailed/&quot;&gt;浏览器缓存机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/navigation-timing/&quot;&gt;Navigation Timing&lt;/a&gt;、&lt;a href=&quot;http://www.w3.org/TR/resource-timing/&quot;&gt;Resource Timing&lt;/a&gt; 相关文章请谷歌，必备知识&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ecdoer.com/post/dns.html&quot;&gt;DNS 解析过程原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/xingtian713/article/details/11882795&quot;&gt;高性能浏览器网络翻译系列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;进阶&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://network.51cto.com/art/201401/426957.htm&quot;&gt;SPDY 协议&lt;/a&gt; 基于此的 Http2.0 协议即将发布&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/&quot;&gt;浏览器渲染原理&lt;/a&gt; 比较难懂，但是非常经典&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fe.baidu.com/doc/wpo/research/chromium-gettingstart-guide.text&quot;&gt;Chrome 实现原理学习指南&lt;/a&gt; 多益大牛的总结&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;开发实战  &lt;code&gt;★★★★&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;通用&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/5362856/&quot;&gt;高性能 JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/&quot;&gt;writing-fast-memory-efficient-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb250448.aspx&quot;&gt;Understanding and Solving Internet Explorer Leak Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;模块化加载 &lt;a href=&quot;https://fis.baidu.com&quot;&gt;FIS&lt;/a&gt;、SeaJS。FIS 有完善的静态资源管理和优化方案，推荐。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iteye.com/magazines/116-Web-Front-Performance-Best-Practice&quot;&gt;前端性能优化最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;动画与渲染&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/&quot;&gt;requestAnimationFrame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://velocity.oreilly.com.cn/2013/ppts/16_ms_optimization--web_front-end_performance_optimization.pdf&quot;&gt;16ms 的优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/&quot;&gt;css&lt;/a&gt;、&lt;a href=&quot;http://mir.aculo.us/2010/08/17/when-does-javascript-trigger-reflows-and-rendering/&quot;&gt;JS&lt;/a&gt;不要引起 Repaint &amp;amp; Reflow &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;移动端开发&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/speed/html5/&quot;&gt;Improving the Performance of your HTML5 App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stevesouders.com/mobileperf/&quot;&gt;Steve Souders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mobile.smashingmagazine.com/2013/08/12/creating-high-performance-mobile-websites/&quot;&gt;Creating High-Performance Mobile Websites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/mobile/optimization-and-performance/&quot;&gt;HTML5 Techniques for Optimizing Mobile Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/webmasters/smartphone-sites/website-improvement-checklist&quot;&gt;移动 web 站点优化指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;性能监控  &lt;code&gt;★★★★&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.smartbear.com/performance/essential-web-performance-metrics-part-2/&quot;&gt;监控指标选取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/watchingwebsites/complete-web-monitoring-web-performance-at-emetrics?qid=a6296849-f0ce-4c71-9322-0be0f6eedb27&amp;amp;v=qf1&amp;amp;b=&amp;amp;from_search=11&quot;&gt;Complete Web Monitoring - Web Performance at eMetrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tech.weibo.com/?p=2150&quot;&gt;berserkJS 建立前端性能监控平台&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/catchpoint/ny-webperf-peelingonion?qid=a6296849-f0ce-4c71-9322-0be0f6eedb27&amp;amp;v=qf1&amp;amp;b=&amp;amp;from_search=8&quot;&gt;NY Web Perf Meetup: Peeling the Web Performance Onion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;相关会议 &lt;code&gt;★★★&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://velocity.oreilly.com.cn/2012/&quot;&gt;velocity&lt;/a&gt; 业内最出名的国际会议之一&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/events/io/&quot;&gt;Google I/O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.qconbeijing.com/&quot;&gt;Qcon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;推荐博客  &lt;code&gt;★★★&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webperformancetoday.com/&quot;&gt;web performance today&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.perfplanet.com/&quot;&gt;perfplanet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stevesouders.com/blog/&quot;&gt;stevesouders.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.yottaa.com/blog/topic/site-performance-and-optimization&quot;&gt;site-performance-and-optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sun, 11 May 2014 00:00:00 +0800</pubDate>
                <link>http://fex.baidu.com/blog/2014/05/build-performance-monitor-in-7-days</link>
                <guid isPermaLink="true">http://fex.baidu.com/blog/2014/05/build-performance-monitor-in-7-days</guid>
            </item>
        
            <item>
                <title>前端数据之美 -- 基础篇</title>
                <description>作者：zhangjunah &lt;br&gt; &lt;h2&gt;引言&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;对于一个成熟的产品来说，隐藏在产品背后的数据分析是非常重要的，也是必不可少的。特别是在重视用户体验的今天，需要我们及时了解产品的使用情况，分析数据中隐藏的信息，为产品的提升和改进提供数据支撑。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;随着 web 技术的蓬勃发展，前端的展示、交互越来越复杂，在用户的访问、操作过程中产生了大量的数据。由此，前端的数据分析也变得尤为重要。当然，对于站长来说，你可以使用&lt;a href=&quot;http://tongji.baidu.com&quot;&gt;百度统计&lt;/a&gt;等各种已有的服务平台，但是，如果现有的统计平台不能满足你的需要，你想开发自己定制化的数据统计平台，或者你是一个纯粹的 geek，想了解背后隐藏的技术，又或者你对前端的数据统计感兴趣，本文就能满足你那颗好奇的心。下面就逐步描述前端有哪些数据、如何采集前端的数据、以及如何展示数据统计的结果。&lt;/p&gt;

&lt;h2&gt;有哪些？&lt;/h2&gt;

&lt;p&gt;前端的数据其实有很多，从大众普遍关注的 &lt;a href=&quot;http://baike.baidu.com/subview/40888/5000818.htm&quot;&gt;PV&lt;/a&gt;、&lt;a href=&quot;http://baike.baidu.com/subview/595240/9307972.htm&quot;&gt;UV&lt;/a&gt;、广告点击量，到客户端的网络环境、登陆状态，再到浏览器、操作系统信息，最后到页面性能、JS 异常，这些数据都可以在前端收集到。数据很多、很杂，不进行很好的分类肯定会导致统计混乱，也不利于统计代码的组织，下面就对几种普遍的数据需求进行了分类：&lt;/p&gt;

&lt;h3&gt;1、访问&lt;/h3&gt;

&lt;p&gt;访问数据是基于用户每次在浏览器上打开目标页面来统计的，它是&lt;strong&gt;以 PV 为粒度的统计&lt;/strong&gt;，一个 PV 只统计一次访问数据。访问数据可以算作是最基础、覆盖面最广的一种统计，可以统计到很多的指标项，下面列出了一些较为常见的指标项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PV/UV&lt;/strong&gt;：最基础的 PV（页面访问数量）、UV（独立访问用户数量）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;页面来源&lt;/strong&gt;：页面的 refer，可以定位页面的入口&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统&lt;/strong&gt;：了解用户的 OS 状况，帮助分析用户群体的特征，特别是移动端，iOS 和 Android 的分布就更有意义了&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浏览器&lt;/strong&gt;：可以统计到各种浏览器的占比，对于是否继续兼容 IE6、新技术（HTML5、CSS3 等）的运用等调研提供参考价值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分辨率&lt;/strong&gt;：对页面设计提供参考，特别是&lt;a href=&quot;http://baike.baidu.com/view/9876268.htm&quot;&gt;响应式设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;登录率&lt;/strong&gt;：百度也开始看重登陆，登陆用户具有更高的分析价值，引导用户登陆是非常重要的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地域分布&lt;/strong&gt;：访问用户在地理位置上的分布，可以针对不同地域做运营、活动等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络类型&lt;/strong&gt;：wifi/3G/2G，为产品是否需要适配不同网络环境做决策&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问时段&lt;/strong&gt;：掌握用户访问时间的分布，引导消峰填谷、节省带宽&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;停留时长&lt;/strong&gt;：判断页面内容是否具有吸引力，对于需要长时间阅读的页面比较有意义&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;到达深度&lt;/strong&gt;：和停留时长类似，例如&lt;a href=&quot;http://baike.baidu.com/view/1758.htm&quot;&gt;百度百科&lt;/a&gt;，用户浏览时的页面到达深度直接反映词条的质量&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;2、性能&lt;/h3&gt;

&lt;p&gt;页面 DOM 结构越来越复杂，但是又要追求用户体验，这就对页面的性能提出了更高的要求。性能的监控数据主要是用来衡量页面的流畅程度，也有一些主要的指标：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;白屏时间&lt;/strong&gt;：用户从打开页面开始到页面开始有东西呈现为止，这过程中占用的时间就是白屏时间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;首屏时间&lt;/strong&gt;：用户浏览器首屏内所有内容都呈现出来所花费的时间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户可操作时间&lt;/strong&gt;：用户可以进行正常的点击、输入等操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;页面总下载时间&lt;/strong&gt;：页面所有资源都加载完成并呈现出来所花的时间，即页面 onload 的时间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义的时间点&lt;/strong&gt;：对于开发人员来说，完全可以自定义一些时间点，例如：某个组件 init 完成的时间、某个重要模块加载的时间等等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里只是解释了这些指标的含义，具体的判断、统计方式在后续发出的文章中会详细介绍。&lt;/p&gt;

&lt;h3&gt;3、点击&lt;/h3&gt;

&lt;p&gt;在用户的所有操作中，&lt;strong&gt;点击&lt;/strong&gt;应该是最为主要的一个行为，包含了：pc 端鼠标的 click，移动端手指的 touch。用户的每次点击都是一次诉求，从点击数据中可以挖掘的信息其实有很多，下面只列出了我们目前所关注的指标：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;页面总点击量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人均点击量&lt;/strong&gt;：对于导航类的网页，这项指标是非常重要的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流出 url&lt;/strong&gt;：同样，导航类的网页，直接了解网页导流的去向&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;点击时间&lt;/strong&gt;：用户的所有点击行为，在时间上的分布，反映了用户点击操作的习惯&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;首次点击时间&lt;/strong&gt;：同上，但是只统计用户的第一次点击，如果该时间偏大，是否就表明页面很卡导致用户长时间不能点击呢？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;点击热力图&lt;/strong&gt;：根据用户点击的位置，我们可以画出整个页面的点击热力图，可以很直观的了解到页面的热点区域&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;4、异常&lt;/h3&gt;

&lt;p&gt;这里的异常是指 JS 的异常，用户的浏览器上报 JS 的 bug，这会极大地降低用户体验，对于浏览器型号、版本满天飞的今天，再 NB 的程序员也难免会有擦枪走火的时候，当然 QA 能够覆盖到大部分的 bug，但肯定也会有一些 bug 在线上出现。JS 的异常捕获只有两种方式：&lt;strong&gt;window.onerror&lt;/strong&gt;、&lt;strong&gt;try/catch&lt;/strong&gt;，关于我们是如何做的将在后续的文章中有详细的描述，这里只列出捕获到异常时，一般需要采集哪些信息（主要用来 debug 异常）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;异常的提示信息&lt;/strong&gt;：这是识别一个异常的最重要依据，如：&amp;#39;e.src&amp;#39; 为空或不是对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JS 文件名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常所在行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发生异常的浏览器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;堆栈信息&lt;/strong&gt;：必要的时候需要函数调用的堆栈信息，但是注意堆栈信息可能会比较大，需要截取&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;5、其他&lt;/h3&gt;

&lt;p&gt;除了上面提到的 4 类基本的数据统计需求，我们当然还可以根据实际情况来定义一些其他的统计需求，如用户浏览器对 canvas 的支持程度，再比如比较特殊的 -- 用户进行轮播图翻页的次数，这些数据统计需求都是前端能够满足的，每一项统计的结果都体现了前端数据的价值。&lt;/p&gt;

&lt;h2&gt;如何采集？&lt;/h2&gt;

&lt;p&gt;在前端，通过注入 JS 脚本，使用一些 JS API（如：!!window.localStorage 就可以检验浏览器是否支持 localStorage）或者监听一些事件（如：click、window.onerror、onload 等）就可以得到数据。捕获到这些数据之后，需要将数据发送回服务器端，一般都是采用访问一个固定的 url，把数据作为该 url 的 query string，如：&lt;a href=&quot;http://www.baidu.com/u.gif?data1=hello&amp;amp;data2=hi%E3%80%82&quot;&gt;http://www.baidu.com/u.gif?data1=hello&amp;amp;data2=hi。&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;在实践的过程中我们抽离了一套用于前端统计的框架&lt;a href=&quot;https://github.com/fex-team/alog&quot;&gt;alog&lt;/a&gt;，方便开发者书写自己的统计脚本，具体的使用方法和 API 见&lt;a href=&quot;https://github.com/fex-team/alog&quot;&gt;github&lt;/a&gt;。下面就使用 alog 来简单说明如何进行前端数据的采集：&lt;/p&gt;

&lt;p&gt;例如：&lt;strong&gt;你需要统计页面的 PV，顺便加上页面来源（refer）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 加载 alog，alog 是支持异步的&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alogObjectName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asyn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://uxrp.github.io/alog/dist/alog.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;alog&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 定义一个统计模块 pv&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;define&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pv&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; 
   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pvTracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;pv&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;pvTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ref&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;referrer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 设定 ref 参数&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pvTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 创建一个 pv 统计模块的实例&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;pv.create&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;postUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://localhost/u.gif&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 指定上传数据的 url 地址&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 上传数据&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;pv.send&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pageview&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 指明是 pageview&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在页面上部署上面的代码，浏览器将会发送下面的 http 请求：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//localhost/u.gif?t=pageview&amp;amp;ref=yourRefer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再例如：&lt;strong&gt;JS 异常的采集，需要进行事件监听&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 加载 alog&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alogObjectName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asyn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://uxrp.github.io/alog/dist/alog.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;alog&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 定义一个统计模块 err&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;define&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;err&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; 
   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errTracker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;err&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//监听 window.onerror&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;errTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;err&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ln&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 创建一个 err 统计模块的实例&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;err.create&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;postUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://localhost/u.gif&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时，只要页面中 JS 发生异常，就会发送如下面的 HTTP 请求&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//localhost/u.gif?t=err&amp;amp;msg=errMessage&amp;amp;js=jsFileName&amp;amp;ln=errLine&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;如何展示&lt;/h2&gt;

&lt;p&gt;采集到数据之后，经过一系列的数据处理、汇总等操作之后，我们需要使用生动的图表来呈现数据，让用户（产品决策者、开发人员等）能够方便、快捷的看懂数据。我们推荐使用百度的开源 javascript 图表库&lt;a href=&quot;http://echarts.baidu.com/&quot;&gt;ECharts&lt;/a&gt;。下面列举几个常见的数据展示方式：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;浏览器的占比情况：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/front_end-data/browser.png&quot; alt=&quot;browser&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用户的登陆情况&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/front_end-data/login.png&quot; alt=&quot;login&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用户的地理位置分布&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/front_end-data/location.png&quot; alt=&quot;location&quot;&gt;&lt;/p&gt;

&lt;p&gt;有些时候需要看多天的波动情况，例如&lt;strong&gt;浏览器的多天占比波动情况&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/front_end-data/stack.png&quot; alt=&quot;stack&quot;&gt;&lt;/p&gt;

&lt;p&gt;还有些时候你可能需要使用一些表格来展示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/front_end-data/feature.png&quot; alt=&quot;feature&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/front_end-data/search.png&quot; alt=&quot;search&quot;&gt;&lt;/p&gt;

&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;前端的数据有很多的分析价值，它是线上用户的真实反馈，直接体现着产品的用户体验。根据文中描述的步骤，你完全可以搭建自己的前端数据平台。&lt;/p&gt;

&lt;p&gt;该文写在&lt;a href=&quot;http://www.w3ctech.com/&quot;&gt;w3ctech&lt;/a&gt;的&lt;a href=&quot;http://www.w3ctech.com/event/34&quot;&gt;走进名企 - 百度前端 FEX 专场&lt;/a&gt;之后，分享时的 PPT 在&lt;a href=&quot;https://speakerdeck.com/baidufe/bai-du-qian-duan-ji-chu-shu-ju-ping-tai-jie-shao&quot;&gt;这里&lt;/a&gt;，视频在&lt;a href=&quot;http://v.youku.com/v_show/id_XNjk2NDYyNDI0.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
</description>
                <pubDate>Wed, 07 May 2014 00:00:00 +0800</pubDate>
                <link>http://fex.baidu.com/blog/2014/05/front_end-data</link>
                <guid isPermaLink="true">http://fex.baidu.com/blog/2014/05/front_end-data</guid>
            </item>
        
            <item>
                <title>Web Components - 面向未来的组件标准</title>
                <description>作者：miller &lt;br&gt; &lt;blockquote&gt;
&lt;p&gt;首先需要说明的是这不是一篇 Web Components 的科普文章，如果对此了解不多推荐先读&lt;a href=&quot;http://css-tricks.com/modular-future-web-components/&quot;&gt;《A Guide to Web Components》&lt;/a&gt;。有句古话-“授人以鱼，不如授人以渔”，如果把组件比作“鱼”的话，对于前端开发者而言，W3C组织制定的HTML标准以及浏览器厂商的实现都是“鱼”而不是“渔”，开发者在需求无法满足的情况下通过现有技术创造了各种组件，虽然短期满足了需求但是由于严重缺乏标准，导致同一个组件有成千上万的相似实现但它们却无法相互重用，这很大程度上制约了组件化的最大价值-重用，Web Components则在组件标准化方面向前迈了一大步。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;现状与困境&lt;/h2&gt;

&lt;p&gt;组件化给前端开发带来了极大的效率提升，组件化的UI框架也因此层出不穷，从&lt;a href=&quot;http://extjs.com&quot;&gt;EXTJs&lt;/a&gt;、&lt;a href=&quot;https://yuilibrary.com/&quot;&gt;YUI&lt;/a&gt;到 &lt;a href=&quot;http://jqueryui.com/&quot;&gt;jQuery UI&lt;/a&gt; ，再到 &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;、&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;、&lt;a href=&quot;http://goratchet.com&quot;&gt;Ratchet&lt;/a&gt;、&lt;a href=&quot;ionicframework.com&quot;&gt;Ionic&lt;/a&gt;等等等等等等，几乎每年都有很多新的UI框架冒出来，它们或者借鉴或者颠覆其他已存在的框架。简单对比一下就会发现这些框架的很大一部分模块在功能上是重合的，但也仅仅在功能层面重合，代码层面确完全不兼容。&lt;/p&gt;

&lt;p&gt;接下来选择 jQuery UI、&lt;a href=&quot;http://kendoui.com&quot;&gt;KendoUI&lt;/a&gt; 以及 Bootstrap 中的&lt;code&gt;Dialog&lt;/code&gt;组件从初始化、方法调用以及事件响应方面进行简单的对比。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery UI&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 初始化&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#dialog&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dialogClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;no-close&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 显示&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.selector&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;effect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;blind&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 关闭事件&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.selector&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dialogclose&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Kendo UI&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 初始化&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#dialog&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kendoWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Minimize&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Maximize&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 显示&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#dialog&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;kendoWindow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 关闭事件&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#dialog&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;kendoWindow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;close&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Bootstrap&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 初始化&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#myModal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;keyboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 显示&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#myModal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;show&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 关闭事件&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#myModal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hidden.bs.modal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单对比可以发现，几乎完全相同的功能在接口层面完全不兼容，导致使用者从某个实现切换到另一个实现时需要非常高的成本，这就是目前Web组件化方面无序和缺乏标准的一个写照。&lt;/p&gt;

&lt;p&gt;再来看目前浏览器“内置”组件的现状，由标准化组织建立 HTML4、HTML5 等各种标准，浏览器厂商按照标准实现“内置”组件并声称兼容某某标准，开发者遵循标准来使用组件，使得代码可以在不同的浏览器里通过相同的方式来使用组件。&lt;/p&gt;

&lt;p&gt;以“内置”组件&lt;code&gt;video&lt;/code&gt;来简单示例：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 初始化（直接写&amp;lt;video&amp;gt;标签或者通过javascript创建）&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;video&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 播放&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 播放事件&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;video&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;play&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// do something...&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相比使用各种组件框架来说，“内置”组件也是由不同的开发者（浏览器厂商）开发，但是由于遵循了相同的标准使得“内置”组件的使用在跨浏览器方面的成本大幅降低。&lt;/p&gt;

&lt;p&gt;综上所述，组件框架目前无序、缺乏标准以及低效复用方面的问题需要通过组件标准化来解决，而Web Components则是标准化的一个很好的选择。&lt;/p&gt;

&lt;h2&gt;面向未来的组件标准&lt;/h2&gt;

&lt;p&gt;Web Components 的出现给组件标准化带来了很好的契机：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WEB组件目前仍然依靠各种类似&amp;quot;Hack&amp;quot;的方式来模拟，模拟方式也各有不同，很难统一和标准化，而 Web Components 则直接提供了标准化的组件定义方式，这是组件标准化的基石，使得未来的组件能够统一创建、方法调用、事件监听、属性访问等。&lt;/li&gt;
&lt;li&gt;基于标准化的组件定义方式，我们便可以像W3C等标准组织一样来定义组件标准，无需再依赖、等待“内置”组件，这也使得我们获得了“渔”的能力。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上述的例子为例，未来可能会有一小撮人成立某个组件标准化组织-X，X的职责就是根据WEB组件的使用现状以及潜在的新需求来规范一个组件，包括组件的名称、方法、属性、事件。&lt;/p&gt;

&lt;p&gt;例如《Dialog规范1.0》&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;组件名：x-dialog&lt;/li&gt;
&lt;li&gt;属性：title &lt;/li&gt;
&lt;li&gt;方法：show hide&lt;/li&gt;
&lt;li&gt;事件：hide show&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;随后出现的UI框架宣称支持《Dialog规范》，但在实现上完全没有制约，可以是完全不同的实现方式、或者更好的性能、更炫的UI，而对于开发者而言，只需要写如下代码即可：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 初始化(&amp;lt;x-dialog/&amp;gt;或者如下代码)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x-dialog&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 获取和设置title&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;-_-&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 显示&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 关闭事件&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hide&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do something...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当用户不满意某个 Dialog 的实现而需要切换到其他实现版本时只需要引入不同的实现库，而不再需要重构代码。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;// bootstrap
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;import&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/components/bootstrap/dialog.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

// jQuery UI
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;import&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/components/jqueryui/dialog.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

// Kendo UI
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;import&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/components/kendoui/dialog.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;跨端的组件标准&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://weibo.com/zswang&quot;&gt;集鹄&lt;/a&gt;在&lt;a href=&quot;http://fex.baidu.com/blog/2014/05/light-component/&quot;&gt;跨端组件实践 - 移动时代的前端&lt;/a&gt;一文中提到了跨端组件的概念。&lt;/p&gt;

&lt;p&gt;跨端组件的实现同样面临着标准化的问题，Web Components 的标准化只规范接口，而底层的实现是完全自由的，自由到你可以使用 Web 技术来实现也可以使用 Native技术。&lt;/p&gt;

&lt;p&gt;同样以 Dialog 为例，开发者可以在 Android 中用 Java 或者在 iOS 中用 Objective C 来开发声称兼容 《Dialog规范1.0》的组件，此时，Web 开发者的那段调用 Dialog 的代码不仅仅在 浏览器环境有效，在 Native 依然有效，而且调用的是 Native 实现，能够获得更为出色的性能。&lt;/p&gt;

&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;回顾浏览器的发展历史，也曾经历混乱和无序，随着W3C标准化组织的出现这一局面有了翻天覆地的变化，而对于Web组件而言，Web Components 的出现才仅仅是这一变化的开始，随着更为复杂的多端环境的出现，组件标准化还有着更大的想象空间。&lt;/p&gt;
</description>
                <pubDate>Sun, 04 May 2014 00:00:00 +0800</pubDate>
                <link>http://fex.baidu.com/blog/2014/05/web-components-future-oriented</link>
                <guid isPermaLink="true">http://fex.baidu.com/blog/2014/05/web-components-future-oriented</guid>
            </item>
        
            <item>
                <title>2D 绘图技术中的坐标系统与坐标变换</title>
                <description>作者：techird &lt;br&gt; &lt;p&gt;本文介绍在 2D 绘图技术中的坐标系统和坐标变换的相关知识。同时介绍 Kity 在这方面提供的 API 。希望这些知识对于需要进行图形应用开发的同学会有所帮助。&lt;/p&gt;

&lt;h2&gt;锤子的故事&lt;/h2&gt;

&lt;p&gt;很久以前，有一个画家，他很擅长画锤子。他在画板上画了一个矩形，然后又画了一个矩形，如下图，然后锤子就出来了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/hammer.png&quot; alt=&quot;锤子的绘制过程&quot;&gt;&lt;/p&gt;

&lt;p&gt;后来画家转行当程序员，老板要求他把锤子在电脑上绘制出来。很自然地，他算好两个矩形应该在画布上的坐标，然后绘制了出来：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/hammer2.png&quot; alt=&quot;锤子的绘制过程 2&quot;&gt;&lt;/p&gt;

&lt;p&gt;他的代码是这样的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rect1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rect2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rect1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rect2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有一天老板说，我要把锤子放在比较右边的位置。画家说，没问题，他把代码改成：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rect1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rect2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rect1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rect2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;聪明的画家看了一下代码，想到了一件事，假如说老板突然有一天让我画一把瑞士军刀，怎么办？假如哪一天，老板还让我旋转一下这把瑞士军刀，又怎么办。&lt;/p&gt;

&lt;p&gt;老板的要求看起来并不是很过分，画家读了&lt;a name=&quot;Recursive&quot; href=&quot;#Recursive&quot;&gt;这篇文章&lt;/a&gt;之后恍然大悟，可以灵活应对老板的各种要求。&lt;/p&gt;

&lt;h2&gt;坐标系概述&lt;/h2&gt;

&lt;p&gt;坐标系统帮助我们在一个空间中定位图形和描述图形的几何属性。坐标系统有其维度属性，描述不同纬度的图形需要的坐标系也不同。本文针对的是 2D 绘图技术中的坐标系统，故文章后面坐标系统均指二维坐标系统。&lt;/p&gt;

&lt;p&gt;在平面当中，最常见的坐标系统是&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%84%BF%E5%9D%90%E6%A0%87%E7%B3%BB&quot;&gt;笛卡尔坐标系&lt;/a&gt;和&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E6%9E%81%E5%9D%90%E6%A0%87%E7%B3%BB&quot;&gt;极坐标系&lt;/a&gt;。&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%84%BF%E5%9D%90%E6%A0%87%E7%B3%BB&quot;&gt;笛卡尔坐标系&lt;/a&gt;就是我们熟知的平面直角坐标系，在 2D 绘图技术中，使用平面直角坐标系来定位和描述图形。&lt;/p&gt;

&lt;p&gt;平面直角坐标系使用两条互相垂直的数轴来表示，分别称为 X 轴和 Y 轴，它们的交点称为原点。&lt;/p&gt;

&lt;p&gt;需要注意的是，在 2D 屏幕设备中，Y 轴方向都是向下的，这点跟数学上的习惯是相反的。Y 轴方向朝下的笛卡尔系会有以下特性：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Y 坐标越大，位置在越“下面”&lt;/li&gt;
&lt;li&gt;角度的扫描方向为顺时针方向（统一的描述为：从 X 轴正方向到 Y 轴正方向为正角）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/difference-between-math.png&quot; alt=&quot;屏幕坐标系（左）和数学坐标系（右）&quot;&gt;&lt;/p&gt;

&lt;p&gt;图：「屏幕坐标系」（左）「和数学坐标系」（右）&lt;/p&gt;

&lt;h2&gt;自身坐标系与参考坐标系&lt;/h2&gt;

&lt;h3&gt;自身坐标系和参考坐标系&lt;/h3&gt;

&lt;p&gt;在一部分计算机 2D 绘图技术中，每个绘图元素会有自己的一个坐标系，称为「自身坐标系」。当图形 A 放作为图形 B 的一个元素的时候，可以把图形 B 的自身坐标系作为图形 A 的参考坐标系。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这种坐标系机制一般出现在比较高层的绘图技术中（如 SVG），他们能跟踪图形的属性、上下文；而一些底层的绘图接口（如 canvas、GDI），一般没有这些机制，它们直接使用一个坐标系。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了下文描述方便，我们约定：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;约定1. 图形 A 的自身坐标系记为 O&lt;sub&gt;A&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;约定2. 图形 A 在以图形 B 的坐标系观察时使用的参考坐标系记为 O&lt;sub&gt;B&lt;/sub&gt;&lt;sup&gt;A&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O&lt;sub&gt;A&lt;/sub&gt; 可以直接称为 A 的坐标系。O&lt;sub&gt;B&lt;/sub&gt;&lt;sup&gt;A&lt;/sup&gt; 本质上也是 O&lt;sub&gt;B&lt;/sub&gt;，上标表示在描述 A 的时候使用。&lt;/p&gt;

&lt;p&gt;需要注意「自身坐标系」和「参考坐标系」的差别。&lt;/p&gt;

&lt;h4&gt;区别一：产生的场景不同&lt;/h4&gt;

&lt;p&gt;「自身坐标系」是图形天生带有的，并且只有一个，它独立存在图形中，不离不弃，忠实服务。创建一个图形，意味着创建了一个自身坐标系。&lt;/p&gt;

&lt;p&gt;「参考坐标系」是图形复合时产生了从属关系之后的说法。考虑画家的锤子 C，它由两个矩形 A 和 B 组成。这里形成了 3 个自身坐标系。但是我们把 A 和 B 放进 C 里面的时候，A 和 B 不仅可以基于自身坐标系（O&lt;sub&gt;A&lt;/sub&gt; 和 O&lt;sub&gt;B&lt;/sub&gt;）来描述（观察），它还可以使用 C 的坐标系（O&lt;sub&gt;C&lt;/sub&gt;&lt;sup&gt;A&lt;/sup&gt; 和 O&lt;sub&gt;C&lt;/sub&gt;&lt;sup&gt;B&lt;/sup&gt;）来描述（观察）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/hammer3.png&quot; alt=&quot;锤子的坐标系&quot;&gt;&lt;/p&gt;

&lt;p&gt;重合的三个自身坐标系&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里从属关系不一定非要是直接祖孙关系，只要两个图形具有公共祖先就可以认为具有从属关系。像上述的锤子 C，它的两个部件 A 和 B 其实也具有从属关系，他们可以使用彼此的自身坐标系作为参考坐标系。
&lt;br/&gt;
从属关系也不要求前驱后驱关系，锤子 C 也可以以部件 A 的坐标系为参考坐标系，只不过更常见的是局部的图形以全局图形的坐标系来观察。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;区别二：数量不同&lt;/h4&gt;

&lt;p&gt;对于每个图形，「自身坐标系」只有一个，而「参考坐标系」可以针对不同的情况选区不同的参考坐标系。&lt;/p&gt;

&lt;h4&gt;区别三：使用的目的不同&lt;/h4&gt;

&lt;p&gt;「自身坐标系」是用于定义图形的，「参考坐标系」是用来观察图形的。&lt;/p&gt;

&lt;p&gt;我们去绘制图形的时候，使用的坐标系都是「自身坐标系」，只有基于自身坐标系的图形定义。比如我们描述一个矩形，它的位置在 (10, 10)，大小是 (20, 30)。这些坐标以及长度，都是基于自身坐标系来描述的。这个描述是最原始的，在其它参考坐标系中观察的结果，都依赖于这个原始的描述。&lt;/p&gt;

&lt;p&gt;「参考坐标系」是要来观察一个图形在某个坐标系中的呈现的。比如一个在自身坐标系中坐标为 (0, 0) 的矩形，它在父元素坐标系中的坐标可能是 (100, 100)。这里的(100, 100) 只是一个观察结果。在参考坐标系中观察，一般是为了在参考坐标系中需要描述其它图形时，需要参考被观察图形的情况。比如我需要画一个矩形，在刚刚那个矩形的右边，我就需要刚刚那个矩形在参考坐标系中的坐标以及宽度。&lt;/p&gt;

&lt;h3&gt;实际例子&lt;/h3&gt;

&lt;p&gt;考虑下面一段使用 &lt;a href=&quot;https://github.com/fex-team/kity&quot;&gt;Kity&lt;/a&gt; 绘图的代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 在 (0, 0) 处创建一个 50 x 50 的矩形&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 创建 Paper 作为容器&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                        &lt;span class=&quot;c1&quot;&gt;// 讲矩形放置在容器里&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// 把 a 的坐标系平移 (30, 40)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBoundaryBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 返回：{ x: 0, y: 0, width: 50, height: 50 }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRenderBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// 返回：{ x: 30, y: 40, width: 50, height: 50 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码可以这样解读：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代码创建了图形 a，和绘图容器 b。&lt;/li&gt;
&lt;li&gt;把 a 加到了 b 中&lt;/li&gt;
&lt;li&gt;设置 a 的坐标变换：平移 (30, 40)。（后续详细介绍）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.getBoundaryBox()&lt;/code&gt; 忠实地返回图形 a 在 O&lt;sub&gt;a&lt;/sub&gt; 中所占的矩形区域&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.getRenderBox()&lt;/code&gt; 则返回了图形 a 在 O&lt;sub&gt;b&lt;/sub&gt;&lt;sup&gt;a&lt;/sup&gt; 中所占的矩形区域。&lt;/li&gt;
&lt;li&gt;定义 a 的位置和形状（x, y, width, height) 使用的是 O&lt;sub&gt;a&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;在 b 中观察 a 使用的是 O&lt;sub&gt;b&lt;/sub&gt;&lt;sup&gt;a&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;运行结果为（坐标系辅助线是人为加上的）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/reference-coordinate.png&quot; alt=&quot;自身坐标系和参考坐标系&quot;&gt;&lt;/p&gt;

&lt;h2&gt;坐标变换&lt;/h2&gt;

&lt;p&gt;同一个图形在参考坐标系中观察的结果与在自身坐标系中不一样，是因为参考坐标系相对自身坐标系发生了「坐标变换」。&lt;/p&gt;

&lt;p&gt;「坐标变换」是采用一定的数学方法将一个坐标系的坐标变换为另一个坐标系的坐标的过程。&lt;/p&gt;

&lt;p&gt;我们来继续锤子的故事。画家希望他的锤子的参考点是两个矩形连接处的中心，于是他给两个矩形的坐标系进行了一个「坐标变换」：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/hammer4.png&quot; alt=&quot;锤子的坐标变换&quot;&gt;&lt;/p&gt;

&lt;p&gt;那么这个变换是怎么做的？请看下文分解。&lt;/p&gt;

&lt;h3&gt;线性变换&lt;/h3&gt;

&lt;p&gt;「线性变换」是 2D 绘图领域中应用最广的「坐标变换」，它可以满足我们很大一部分对图形变换的需求，如平移、旋转、缩放、拉伸、镜像、对称等。&lt;/p&gt;

&lt;p&gt;为了方便文章后续的描述，我们约定：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;约定3：从 O&lt;sub&gt;A&lt;/sub&gt; 到 O&lt;sub&gt;B&lt;/sub&gt;&lt;sup&gt;A&lt;/sup&gt; 的线性变换记为 T&lt;sub&gt;A&lt;/sub&gt;&lt;sup&gt;B&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;T&lt;sub&gt;A&lt;/sub&gt;&lt;sup&gt;B&lt;/sup&gt; 的意义为：(X, Y) 为 A 在 O&lt;sub&gt;A&lt;/sub&gt; 中任意一点的坐标，(X&amp;#39;, Y&amp;#39;) 是 A 在 O&lt;sub&gt;B&lt;/sub&gt;&lt;sup&gt;A&lt;/sup&gt; 中的坐标，线性变换 T&lt;sub&gt;A&lt;/sub&gt;&lt;sup&gt;B&lt;/sup&gt; 由 6 个参数 (a, b, c, d, e, f) 来描述，变换的运算过程为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;X&amp;#39; = aX + cY + e
Y&amp;#39; = bX + dY + f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该方程可以写成矩阵形式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/transfrom-equation.png&quot; alt=&quot;线性变换方程&quot;&gt;&lt;/p&gt;

&lt;p&gt;这个矩阵称为「二维线性变换矩阵」，记为 M。矩阵 6 个参数的默认值是 (1, 0, 0, 1, 0, 0)。取该值的变换是无变换，因为&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;X&amp;#39; = X
Y&amp;#39; = Y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;常用的线性变换&lt;/h3&gt;

&lt;p&gt;通过不同的线性变换参数，可以得到不同的变换效果。&lt;/p&gt;

&lt;h4&gt;平移&lt;/h4&gt;

&lt;p&gt;考虑让 c = 0, y = 0, a = 1, d = 1。则变换方程变为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;X&amp;#39; = X + e
Y&amp;#39; = Y + f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;X 坐标和 Y 坐标转换后都只是加了一个简单的常数。所以在参考坐标系中，可以看到原本的元素平移了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/translate.png&quot; alt=&quot;平移&quot;&gt;&lt;/p&gt;

&lt;h4&gt;旋转&lt;/h4&gt;

&lt;p&gt;旋转是以参考坐标系的原点为焦点的。&lt;/p&gt;

&lt;p&gt;使用极坐标的参数方程可以很容易求出旋转的变换矩阵系数。自身坐标系的参数方程为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;X = r·cos(α)
Y = r·sin(α)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设旋转的角度是 ø, 则有：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;X&amp;#39; = r·cos(α + ø) = r·cos(α)·cos(ø) - r·sin(α)·sin(ø) = cos(ø)·X + (-sin(ø))·Y + 0
Y&amp;#39; = r·sin(α + ø) = r·cos(α)·sin(ø) + r·sin(α)·cos(ø) = sin(ø)·X + cos(ø)·Y + 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以，旋转的线性变换矩阵系数是：a = cos(ø), b = sin(ø), c = -sin(ø), d = cos(ø)，e 和 f 为 0。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/rotate.png&quot; alt=&quot;旋转&quot;&gt;&lt;/p&gt;

&lt;h4&gt;缩放&lt;/h4&gt;

&lt;p&gt;缩放是以参考坐标系的原点为焦点的。&lt;/p&gt;

&lt;p&gt;a 和 d 是直接控制 X 坐标和 Y 坐标的缩放，让 a 和 d 为 2，其他系数为 0，图形在两个维度上都放大为原来的 2 倍。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/scale.png&quot; alt=&quot;缩放&quot;&gt;&lt;/p&gt;

&lt;h3&gt;线性变换列表&lt;/h3&gt;

&lt;p&gt;坐标经过一次线性变换 &lt;em&gt;M&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt; 之后，还可以继续经过线性变换 &lt;em&gt;M&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt;、&lt;em&gt;M&lt;sub&gt;3&lt;/sub&gt;&lt;/em&gt;、&lt;em&gt;M&lt;sub&gt;4&lt;/sub&gt;&lt;/em&gt; ... &lt;em&gt;M&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt;。最终变换出来的结果是这些变换矩阵的乘积：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CTM&lt;/em&gt; = &lt;em&gt;M&lt;sub&gt;n&lt;/sub&gt;&lt;/em&gt; · &lt;em&gt;M&lt;sub&gt;n-1&lt;/sub&gt;&lt;/em&gt; · ... · &lt;em&gt;M&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt; · &lt;em&gt;M&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt; · &lt;em&gt;M&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;注意，后面的变换要乘在前面。矩阵的乘法不具有交换律。这意味着先旋转再平移和先平移再旋转是不一样的结果。看下面一个实例：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/transform-seq.png&quot; alt=&quot;变换顺序&quot;&gt;&lt;/p&gt;

&lt;p&gt;旋转始终围绕参考坐标系的原点进行。b 是先旋转再平移的，在旋转的时候，原点还是重合的。而 a 是先平移后旋转的，旋转的时候自身坐标的原点已经偏离了 b 的参考坐标系的原点。两个效果是有差别的。&lt;/p&gt;

&lt;h3&gt;线性变换在图形上的应用&lt;/h3&gt;

&lt;h4&gt;前驱坐标系和图形的变换矩阵&lt;/h4&gt;

&lt;p&gt;我们不可能为图形的每一个参考坐标系都设置一个变换矩阵。实际上，很多 2D 绘图引擎都有「前驱坐标系」的概念。「前驱坐标系」就是参照物为容器的参考坐标系。&lt;/p&gt;

&lt;p&gt;我们约定：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;约定4：使用数学上集合的概念来表示图形的包含关系，如果 A 是 B 的一个元素（或者说 B 是 A 的容器），表示为 A ∈ B&lt;/li&gt;
&lt;li&gt;约定5：如果 A ∈ B，那么 O&lt;sub&gt;B&lt;/sub&gt;&lt;sup&gt;A&lt;/sup&gt; 是 A 的「前驱坐标系」，表示为 O&lt;sub&gt;prev&lt;/sub&gt;&lt;sup&gt;A&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;约定6：从 O&lt;sub&gt;A&lt;/sub&gt; 到 O&lt;sub&gt;prev&lt;/sub&gt;&lt;sup&gt;A&lt;/sup&gt; 的线性变换为 T&lt;sub&gt;A&lt;/sub&gt;&lt;sup&gt;prev&lt;/sup&gt;，该线性变换的矩阵为 M&lt;sub&gt;A&lt;/sub&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一系列的约定，其实是为了清楚的描述了图形 A 上的变换矩阵 M&lt;sub&gt;A&lt;/sub&gt; 的含义。它表示从「自身坐标系」到「前驱坐标系」的线性变换。&lt;/p&gt;

&lt;h4&gt;多层包含关系的变换组合&lt;/h4&gt;

&lt;p&gt;在计算相对某个参考坐标系的线性变换时，如果参照物不是图形的直接父级，需要把每一层图形的变换矩阵都计算上。考虑以下的图形层级：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;paper
|--group
|  |--rect
.. .. ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种情况下，会有 T&lt;sub&gt;rect&lt;/sub&gt;&lt;sup&gt;paper&lt;/sup&gt; = M&lt;sub&gt;group&lt;/sub&gt; · M&lt;sub&gt;rect&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;看这个例子的 Live 版本：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBoundaryBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// { x: 0, y: 0, width: 50, height: 50 }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRenderBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// { x: 40, y: 30, width: 50, height: 50 }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRenderBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { x: 70, y: 70, widht: 50, height: 50 }  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/deep-transform.png&quot; alt=&quot;多层变换&quot;&gt;&lt;/p&gt;

&lt;p&gt;rect 的变换矩阵是 &lt;code&gt;matrix(1, 0, 0, 1, 40, 30)&lt;/code&gt;，group 的变换矩阵是 &lt;code&gt;matrix(1, 0, 0, 1, 30, 40)&lt;/code&gt;。rect 计算相对于 paper 的坐标变换的时候，要把中间的每一层坐标变换都算上，最终的结果是 &lt;code&gt;matrix(1, 0, 0, 1, 70, 70)&lt;/code&gt;。&lt;/p&gt;

&lt;h4&gt;变来变去的锤子&lt;/h4&gt;

&lt;p&gt;现在画家的锤子可以随意变来变去了。&lt;/p&gt;

&lt;p&gt;首先，画家把锤子放进了 paper 上：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/hammer6.png&quot; alt=&quot;放进 paper 中的锤子&quot;&gt;&lt;/p&gt;

&lt;p&gt;可是画家发现锤子只剩下了半个手柄！他沉思了一会，想起来一件事。锤子 C 放到 paper 里的时候，锤子的坐标系 O&lt;sub&gt;C&lt;/sub&gt; 和 paper 的坐标系是重合的，而锤子的部件 A 和 B 因为要以 O&lt;sub&gt;C&lt;/sub&gt; 为中心定位，进行了一个坐标转换。所以现在 A 和 B 都有超出了 paper 视野的部分。于是乎，画家设置了锤子 C 的变换矩阵，让 O&lt;sub&gt;C&lt;/sub&gt; 相对 O&lt;sub&gt;paper&lt;/sub&gt; 进行了一个平移：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/hammer7.png&quot; alt=&quot;放进 paper 中的锤子 2&quot;&gt;&lt;/p&gt;

&lt;p&gt;现在锤子已经在画布上了，当然画家不满足，他想把锤子旋转 45 度，然后他在现在的基础上把锤子旋转了 45 度，然后他看到：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/hammer8.png&quot; alt=&quot;放进 paper 中的锤子 3&quot;&gt;&lt;/p&gt;

&lt;p&gt;画家有点懵，这跟他的预期不一样啊。他沉思了一会，想起来了另一件事。画家是先做的平移再旋转，因为旋转的时候 O&lt;sub&gt;C&lt;/sub&gt; 的原点已经偏离了 O&lt;sub&gt;paper&lt;/sub&gt; 的原点，所以是这种效果。于是画家连夜改代码，先进行旋转变换，再平移，于是乎：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/hammer9.png&quot; alt=&quot;放进 paper 中的锤子 4&quot;&gt;&lt;/p&gt;

&lt;p&gt;画家大呼过瘾，原来用计算机绘图是如此的有趣。&lt;/p&gt;

&lt;p&gt;现在不妨使用上面的知识分析一下画家最终画出来的锤子。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A 在 O&lt;sub&gt;A&lt;/sub&gt; 中的坐标依然是 (0, 0)。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A 在 O&lt;sub&gt;C&lt;/sub&gt;&lt;sup&gt;A&lt;/sup&gt; 中的坐标是 (-50, -50)，因为 M&lt;sub&gt;A&lt;/sub&gt; = (1, 0, 0, 1, -50, -50)，坐标经行了变换&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C 相对于 paper 进行了坐标变换 M&lt;sub&gt;C&lt;/sub&gt;，M&lt;sub&gt;C&lt;/sub&gt; 是两个变换组合的效果：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;M&lt;sub&gt;C&lt;/sub&gt; = M&lt;sub&gt;C&lt;sub&gt;rotate&lt;/sub&gt;&lt;/sub&gt; · M&lt;sub&gt;C&lt;sub&gt;translate&lt;/sub&gt;&lt;/sub&gt; &lt;/p&gt;

&lt;p&gt;这个组合表示先平移后旋转。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;计算 A 在 O&lt;sub&gt;paper&lt;/sub&gt; 的坐标时，需要进行的坐标转换有两个：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;T&lt;sub&gt;A&lt;/sub&gt;&lt;sup&gt;paper&lt;/sup&gt; = M&lt;sub&gt;C&lt;/sub&gt; · M&lt;sub&gt;A&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;因为 C ∈ paper，并且 A ∈ C&lt;/p&gt;

&lt;h2&gt;在 Kity 中使用坐标系和线性变换&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fex-team/kity&quot;&gt;Kity&lt;/a&gt; 是百度社区基础技术部 &lt;a href=&quot;http://fex.baidu.com&quot;&gt;FEX&lt;/a&gt; 团队开发的一个矢量图形库。在 Kity 当中，提供了强大的坐标计算和变换能力。&lt;/p&gt;

&lt;h3&gt;获得相对于指定参考坐标系的线性变换&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;Shape.getTransform(refer)&lt;/code&gt; 方法获得一个元素坐标系到指定参考物的坐标变换。&lt;code&gt;refer&lt;/code&gt;  为指定的参照物，为空则使用父容器为参考物。例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// {a: 1, b: 0, c: 0, d: 1, e: 10, f: 10}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// {a: 1, b: 0, c: 0, d: 1, e: 20, f: 20}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// {a: 1, b: 0, c: 0, d: 1, e: 30, f: 30}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// {a: 1, b: 0, c: 0, d: 1, e: 30, f: 30}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {a: 1, b: 0, c: 0, d: 1, e: 60, f: 60}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;获得图形在自身坐标系的边界&lt;/h3&gt;

&lt;p&gt;每个图形都有一个矩形边界，这个边界的意义是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;x 表示图形 x 坐标的最小值&lt;/li&gt;
&lt;li&gt;y 表示图形 y 坐标的最小值&lt;/li&gt;
&lt;li&gt;width 表示图形 x 坐标最大的差值&lt;/li&gt;
&lt;li&gt;height 表示图形 y 坐标最大的差值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下图分别是一个矩形、一个三角形、一个圆形的 boundaryBox：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/bbox.png&quot; alt=&quot;boundaryBox&quot;&gt;&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;Shape.getBoundaryBox()&lt;/code&gt; 获得元素在自身坐标系的边界。上图的 kity 代码是：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBoundaryBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOpacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;triangle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RegularPolygon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOpacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;305&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOpacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;triangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;triangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;获得图形在指定参考坐标系中的矩形区域&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;Shape.getRenderBox(refer)&lt;/code&gt; 获得一个元素在指定的元素的坐标系中的矩形区域。&lt;code&gt;refer&lt;/code&gt; 为参照物，为空则使用父容器为参考物。它的算法是这样的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;获得图形的 BoundaryBox&lt;/li&gt;
&lt;li&gt;得到四个点 [x, y], [x + width, y], [x, y + height], [x + width, y + height]&lt;/li&gt;
&lt;li&gt;获得图形相对于 refer 的线性变换 CTM&lt;/li&gt;
&lt;li&gt;对四个点执行线性变换 CTM，得到另外四个点，称为 closurePoints&lt;/li&gt;
&lt;li&gt;对 closurePoints 的每个点的坐标查找最大值和最小值，返回的 renderBox 为：

&lt;ul&gt;
&lt;li&gt;x = xMin&lt;/li&gt;
&lt;li&gt;y = yMin&lt;/li&gt;
&lt;li&gt;width = xMax - xMin&lt;/li&gt;
&lt;li&gt;height = yMax - yMin&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;会同时返回 closurePoints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRenderBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOpacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;triangle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RegularPolygon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOpacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOpacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;triangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;paper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addShapes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;triangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/coordinate-and-transform/rbox.png&quot; alt=&quot;renderBox&quot;&gt;&lt;/p&gt;

&lt;h3&gt;设置线性变换&lt;/h3&gt;

&lt;p&gt;Kity 在一个元素上允许同时设置四个变换矩阵分量：矩阵（M&lt;sub&gt;matrix&lt;/sub&gt;）、平移（M&lt;sub&gt;translate&lt;/sub&gt;）、旋转（M&lt;sub&gt;rotate&lt;/sub&gt;）、缩放（M&lt;sub&gt;scale&lt;/sub&gt;）。他们默认都是 null，即和父元素的坐标系重合。四个变换的接口分别是：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 矩阵&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 缩放&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 旋转&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 平移&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图形最终的变换矩阵 M = M&lt;sub&gt;matrix&lt;/sub&gt; · M&lt;sub&gt;scale&lt;/sub&gt; · M&lt;sub&gt;rotate&lt;/sub&gt; · M&lt;sub&gt;translate&lt;/sub&gt; &lt;/p&gt;

&lt;p&gt;也就是说，无论变换接口的调用顺序如何，Kity 都是以以下顺序变换的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;矩阵变换&lt;/li&gt;
&lt;li&gt;缩放&lt;/li&gt;
&lt;li&gt;旋转&lt;/li&gt;
&lt;li&gt;平移&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用这个顺序的目的是为了保证最常用的平移始终保持在参考坐标系的方向上进行。如果需要精细控制变换，可以通过设置变换矩阵来实现。&lt;/p&gt;

&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/SVG/coords.html&quot;&gt;(SVG)Coordinate Systems, Transformations and Units&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sun, 04 May 2014 00:00:00 +0800</pubDate>
                <link>http://fex.baidu.com/blog/2014/05/coordinate-and-transform</link>
                <guid isPermaLink="true">http://fex.baidu.com/blog/2014/05/coordinate-and-transform</guid>
            </item>
        
            <item>
                <title>跨端组件实践 - 移动时代的前端</title>
                <description>作者：zswang &lt;br&gt; &lt;h1&gt;跨端组件实践 - 移动时代的前端&lt;/h1&gt;

&lt;p&gt;上周六在 &lt;a href=&quot;http://www.qconbeijing.com/node/535&quot;&gt;QCon&lt;/a&gt; 分享了这个主题，说好的要有文档……&lt;/p&gt;

&lt;h2&gt;背景&lt;/h2&gt;

&lt;h3&gt;唯一不变的就是变化&lt;/h3&gt;

&lt;p&gt;从业十多年，互联网的变化非常大：最初使用的电脑只有 8M 内存、32M 硬盘，现在口袋里装的手机已经是 2G 内存、16G 闪存，网络也从 56K 变成了 1.5M+。这个时代的人是幸福的……&lt;/p&gt;

&lt;p&gt;这个期间也见证了 Web 时代的繁荣，从 C/S 走到 B/S。&lt;/p&gt;

&lt;p&gt;现在无论是邮件、购物还是游戏、社交、工作等等，在电脑上都能找到满意的 Web 应用或站点。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;购物：淘宝、京东、当当、苏宁易购 &lt;a href=&quot;http://weibo.com/sharpmaster&quot;&gt;@民工精髓V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;社交：&lt;a href=&quot;http://tieba.baidu.com&quot;&gt;贴吧&lt;/a&gt;、&lt;a href=&quot;http://weibo.com/&quot;&gt;微博&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;游戏：各种页游、我常玩的是 &lt;a href=&quot;https://alliances.commandandconquer.com/&quot;&gt;Web 红警&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;办公：&lt;a href=&quot;http://naotu.baidu.com/&quot;&gt;脑图&lt;/a&gt;、&lt;a href=&quot;http://www.processon.com/&quot;&gt;流程图&lt;/a&gt;、&lt;a href=&quot;http://today.ai/&quot;&gt;日程安排&lt;/a&gt;、&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;、&lt;a href=&quot;https://mail.google.com&quot;&gt;邮件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;可是这种景象在移动时代并没有看到。&lt;/p&gt;

&lt;p&gt;现场小调查：请问你在手机上和 PC 上用什么方式刷微博？&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;大部分的人不会在 PC 上用客户端刷微博&lt;/li&gt;
&lt;li&gt;大部分的人不会在手机上用浏览器刷微博&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;结论符合预期，先从变化上分析问题&lt;/p&gt;

&lt;h3&gt;移动互联网发生了什么变化？&lt;/h3&gt;

&lt;p&gt;屏幕更小&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;显示区更宝贵，广告区更难摆放&lt;/li&gt;
&lt;li&gt;页面布局更讲究，内容主次更为重要&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;随身携带&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;24 小时待机&lt;/li&gt;
&lt;li&gt;根据地理位置提供更精准的服务&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;触摸操作&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;双手很难并行&lt;/li&gt;
&lt;li&gt;虚拟键盘没有物理键盘便捷&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更丰富的内置设备&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;前后置摄像头 / 闪关灯&lt;/li&gt;
&lt;li&gt;麦克风 / 扬声器&lt;/li&gt;
&lt;li&gt;振动器，静音状态也可以知道有消息到达&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/154967.htm&quot;&gt;电子指南针&lt;/a&gt; / 陀螺仪&lt;/li&gt;
&lt;li&gt;蓝牙 / WiFi / &lt;a href=&quot;http://baike.baidu.com/subview/917495/5282340.htm&quot;&gt;NFC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;离线使用场景&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在没有信号&lt;/li&gt;
&lt;li&gt;资费不足&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;没有持久能源&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;电池需要充电&lt;/li&gt;
&lt;li&gt;计算能力和待机时间冲突&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;设备碎片化
* 特别是 &lt;a href=&quot;http://baike.baidu.com/subview/1241829/9322617.htm&quot;&gt;Android&lt;/a&gt; 各种屏幕尺寸、各种 &lt;a href=&quot;http://baike.baidu.com/view/7047904.htm&quot;&gt;ROM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;移动互联网的变化带来了新的机遇和挑战&lt;/p&gt;

&lt;h3&gt;机遇&lt;/h3&gt;

&lt;p&gt;移动市场高速增长&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;艾瑞咨询数据显示，2013 年中国移动互联网市场规模达到 &lt;code&gt;1059.8&lt;/code&gt; 亿元，同比增速 &lt;code&gt;81.2%&lt;/code&gt;， 预计到 2017 年，市场规模将增长约 &lt;code&gt;4.5&lt;/code&gt; 倍，接近 &lt;code&gt;6000&lt;/code&gt; 亿。移动互联正在深刻影响人们的日常生活，移动互联网市场进入高速发展通道。&lt;a href=&quot;http://www.techweb.com.cn/data/2014-01-20/1383076.shtml&quot;&gt;【查看来源】&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;挑战&lt;/h3&gt;

&lt;p&gt;HTML5 / CSS3 技术在移动端受限&lt;/p&gt;

&lt;p&gt;What stops developers from using HTML5？&lt;a href=&quot;http://www.visionmobile.com/blog/2013/12/html5-performance-is-fine-what-we-are-missing-is-tools/&quot;&gt;【查看来源】&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/light-component/webapp-issue.png&quot; alt=&quot;性能测试&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;为什么开发者不选择 HTML5 构建移动应用？
前三个原因是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;性能问题，流畅度与 Native 差距较大&lt;/li&gt;
&lt;li&gt;硬件接口缺失，不能控制蓝牙、闪关灯、振动、WiFi、&lt;a href=&quot;http://baike.baidu.com/subview/917495/5282340.htm&quot;&gt;NFC&lt;/a&gt; 等等&lt;/li&gt;
&lt;li&gt;难以集成本地元素，不能使用桌面图标、订阅推送等&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是我们用主流的机型做的性能测试&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/light-component/native-vs-web.png&quot; alt=&quot;性能测试&quot;&gt;&lt;/p&gt;

&lt;p&gt;不难看出 Native 和 Web 的性能依旧差距很大，包括主流韩国和国产机型。&lt;/p&gt;

&lt;p&gt;人眼刷新率平均是 24 帧 / 秒，低于这个值用户就会感觉到跳帧。&lt;/p&gt;

&lt;p&gt;当然这些问题在 PC 时代也碰到过！那时是怎么解决的？&lt;/p&gt;

&lt;h3&gt;影响前端的技术&lt;/h3&gt;

&lt;p&gt;通过浏览器扩展本地能力&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用 &lt;a href=&quot;http://baike.baidu.com/view/28141.htm&quot;&gt;ActiveX&lt;/a&gt; / &lt;a href=&quot;http://zh.wikipedia.org/wiki/NPAPI&quot;&gt;NPAPI&lt;/a&gt; 技术&lt;/li&gt;
&lt;li&gt;最经典的插件就是 Flash，虽然它已经淡出了移动时代&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JavaScript Engine 进化&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;V8 出现后，JavaScript 的性能提升了数倍&lt;/li&gt;
&lt;li&gt;结合高性能的引擎 NodeJS 也使 JavaScript 在后端获得了新生&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/view/951383.htm&quot;&gt;HTML5&lt;/a&gt; / CSS3&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;扩展了本地能力，如地理定位、录音录像、本地存储等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但这些影响在移动端是有限的&lt;/p&gt;

&lt;h3&gt;移动时代前端的现状&lt;/h3&gt;

&lt;p&gt;Flash 不能使用&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnbeta.com/articles/161452.htm&quot;&gt;Adobe 将停止开发移动版 Flash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NPAPI 即将退役&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Google 今年开始屏蔽 NPAPI 插件&lt;a href=&quot;http://techcrunch.cn/2013/09/24/say-goodbye-to-npapi/&quot;&gt;【查看来源】&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google 网络商店不会再接受任何包含基于 NPAPI 插件的新应用或拓展。&lt;/li&gt;
&lt;li&gt;对于需要 NPAPI 替代品的开发者，Google 推荐转向 &lt;a href=&quot;https://developers.google.com/native-client/&quot;&gt;NaCl&lt;/a&gt;、&lt;a href=&quot;http://developer.chrome.com/apps/&quot;&gt;Apps&lt;/a&gt;、&lt;a href=&quot;http://developer.chrome.com/extensions/messaging.html#native-messaging&quot;&gt;原生消息 API&lt;/a&gt; 和&lt;a href=&quot;https://support.google.com/chrome/a/answer/3019558&quot;&gt;旧版浏览器支持&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;浏览器插件可以扩展本地能力的同时，也会带来稳定性和安全性的问题。&lt;/p&gt;

&lt;h3&gt;怎么解决性能瓶颈和本地能力缺失的问题？&lt;/h3&gt;

&lt;p&gt;JS Binding，通过 JavaScript 直接调用 Native API&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从 iOS7 开始，可以使用 &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Carbon/Reference/WebKit_JavaScriptCore_Ref/_index.html&quot;&gt;JavaScriptCore&lt;/a&gt; 接口&lt;/li&gt;
&lt;li&gt;常见的框架和技术

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cocos2d-x.org/&quot;&gt;Cocos2D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://impactjs.com/ejecta&quot;&gt;Ejecta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ludei.com/&quot;&gt;CoconJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodeapp.org/&quot;&gt;Node.app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JS Translate，通过编译器将 JavaScript 翻译成 Native 语言&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如号称上帝语言的 &lt;a href=&quot;http://haxe.org/&quot;&gt;haXe&lt;/a&gt; 可以翻译成 Java、JavaScript、C++、PHP 的语言&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Native App，直接使用 Native 技术，从头再来&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;广义的前端就是要面向用户界面和交互&lt;/li&gt;
&lt;li&gt;前端技术也有向全端和全栈的发展趋势&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;选择手游创业的 &lt;a href=&quot;http://weibo.com/finscn&quot;&gt;@大城小胖&lt;/a&gt; 近期做了一个教学视频，专门介绍 JSBinding 大家可以参考：&lt;a href=&quot;http://www.imooc.com/view/92&quot;&gt;When iOS loves JS&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PC 时代 JSBinding 可以用 &lt;a href=&quot;http://t.cn/8suz2Q0&quot;&gt;MSScriptControl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上技术可以解决问题，但不能发挥 Web 自然跨端、迭代方便（不同等待漫长的上架时间）的优势&lt;/p&gt;

&lt;p&gt;我们还得寻找一些适合自己的方案。&lt;/p&gt;

&lt;h3&gt;Hybrid 混合应用方案&lt;/h3&gt;

&lt;p&gt;本地服务，网页通过 HTTP / &lt;a href=&quot;http://baike.baidu.com/view/3623887.htm&quot;&gt;WebSocket&lt;/a&gt; 与本地服务通信，使用本地能力&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/light-component/local-service.png&quot; alt=&quot;本地服务&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在 Android 里写一个不难，参考 &lt;a href=&quot;http://nanohttpd.com/&quot;&gt;NanoHttpd&lt;/a&gt; DIY 一个移动版的 HTTP 服务

&lt;ul&gt;
&lt;li&gt;优势：能够无缝兼容所有浏览器&lt;/li&gt;
&lt;li&gt;劣势：通信容易被嗅探和伪造；很难利用 UI 组件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;加壳，这是最常用的技术&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/light-component/shell.png&quot; alt=&quot;加壳&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有较成熟的框架可以使用，如：&lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通过使用和扩展插件，获得本地能力&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Google 也有投入 Cordova 的项目 &lt;a href=&quot;https://github.com/MobileChromeApps/mobile-chrome-apps&quot;&gt;Chrome apps on Android and iOS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本地服务和加壳方式，都能访问本地能力。但后者本地能力在同一个进程里调度，安全性和便利性相对要高。&lt;/p&gt;

&lt;h3&gt;回到主题，什么是跨端组件？&lt;/h3&gt;

&lt;p&gt;自动响应端能力的组件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/light-component/light-component-ui.png&quot; alt=&quot;跨端组件示意&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;受到&lt;a href=&quot;http://baike.baidu.com/view/9876268.htm&quot;&gt;响应式网页设计&lt;/a&gt;理念的启发，界面布局可以根据运行环境自动响应和调整，那么本地能力也可以这样&lt;/li&gt;
&lt;li&gt;如在普通浏览器里使用 HTML5 / CSS3 构造组件，在提供本地能力的环境里使用 Native View 构造组件。&lt;/li&gt;
&lt;li&gt;在提供本地能力的环境里，界面会更流畅；在没有本地能力的环境里应用是完整的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;跨端组件解决的问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;满足 UI 需要局部流畅的需求&lt;/li&gt;
&lt;li&gt;满足运行在各种环境的需求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特点&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;同一套 API&lt;/li&gt;
&lt;li&gt;更好地使用运行环境提供的能力&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;PC 时代也有这样的组件，如：&lt;a href=&quot;http://raphaeljs.com/&quot;&gt;Raphaël&lt;/a&gt; 一款矢量图组件，在具 VML 的环境里使用 VML，其他环境里使用 SVG，并保持同一套 API。发散一想：&lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;、&lt;a href=&quot;https://github.com/fex-team/webuploader&quot;&gt;WebUploader&lt;/a&gt;（适配 Flash 和 HTML5）也都是自动响应各种运行环境。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;成本总是伴随着收益，解决老问题就会带来新的问题&lt;/p&gt;

&lt;p&gt;当页面发生滚动时，Native View 怎么和网页元素一起滚动？还有 &lt;a href=&quot;http://www-archive.mozilla.org/newlayout/doc/reflow.html&quot;&gt;Reflow&lt;/a&gt; 时怎么调整 Native View 的位置?&lt;/p&gt;

&lt;h3&gt;UI 融合的问题&lt;/h3&gt;

&lt;p&gt;滚动的问题在 Android 中处理比较方便。因为 WebView 继承至：ViewGroup / &lt;a href=&quot;http://developer.android.com/reference/android/widget/AbsoluteLayout.html&quot;&gt;AbsoluteLayout&lt;/a&gt;，我们只需要将 WebView 作为 Native View 的容器就可以搞定这个问题。&lt;/p&gt;

&lt;p&gt;Reflow 发生的频率不高，就用了定时器这种简单粗暴的方法&lt;/p&gt;

&lt;h3&gt;跨端组件研发的步骤&lt;/h3&gt;

&lt;h4&gt;确定需求&lt;/h4&gt;

&lt;h5&gt;哪些组件适合做跨端组件？&lt;/h5&gt;

&lt;p&gt;计算量大，需要流畅&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;图册浏览&lt;/li&gt;
&lt;li&gt;地图&lt;/li&gt;
&lt;li&gt;多媒体播放器&lt;/li&gt;
&lt;li&gt;3D渲染&lt;/li&gt;
&lt;li&gt;图像识别，二维码识别、手势识别&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;减少操作步骤，省去授权&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;录像、录音&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTML5能力增强&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;地理定位增强，结合 WiFi&lt;/li&gt;
&lt;li&gt;Canvas 性能增强（参考：&lt;a href=&quot;https://github.com/phonegap/phonegap-plugin-fast-canvas&quot;&gt;FastCanvas&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;开发环境&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Android / &lt;a href=&quot;http://developer.android.com/tools/building/building-cmdline.html&quot;&gt;ANT&lt;/a&gt;、iOS 环境搭建&lt;/li&gt;
&lt;li&gt;安装 &lt;a href=&quot;https://www.npmjs.org/&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;安装 Cordova 参考：&lt;a href=&quot;http://cordova.apache.org/docs/en/edge/guide_cli_index.md.html&quot;&gt;命令行文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;天朝的网络大家知道的，主要找一些代理和镜像&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;设计 API&lt;/h4&gt;

&lt;p&gt;发现很多前端团队都开始使用和关注 &lt;a href=&quot;http://www.w3.org/TR/components-intro/&quot;&gt;Web Components&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在跨端组件的落地上，我们也选择这种方式来提供 API，原因是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;降低学习成本，保留原生 Web 组件的使用方式&lt;/li&gt;
&lt;li&gt;降低业务代码维护工作&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;目前移动端原生还不支持这个标准，还得选用框架适配，如：&lt;a href=&quot;http://www.polymer-project.org&quot;&gt;Polymer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;跨端组件 HTML5 示例代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mapBox&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;light-map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;350&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;center=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;116.404,39.915&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;zoom=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;11&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/light-map&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将组件的HTML部分放到需要显示的位置，然后就和普通的Element一样使用：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var lightMap = document.querySelector(&amp;#39;light-map&amp;#39;);&lt;/code&gt; 可以通过 DOM 树操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightMap.addEventLister()&lt;/code&gt; 添加事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lightMap.setAttribute()、lightMap.getAttribute()&lt;/code&gt; 设置属性&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;组件开发&lt;/h4&gt;

&lt;p&gt;Cordova Plugin 开发&lt;/p&gt;

&lt;p&gt;plugin.xml 配置需要的权限、JavaScript 命名空间、文件对应的工程目录等待。细节请参考&lt;a href=&quot;http://docs.phonegap.com/en/3.0.0/plugin_ref_spec.md.html&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://apache.org/cordova/ns/plugins/1.0&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.baidu.light.flashlight&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.2.7&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Flashlight&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Cordova Flashlight Plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;license&amp;gt;&lt;/span&gt;Apache 2.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/license&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;keywords&amp;gt;&lt;/span&gt;cordova,battery&lt;span class=&quot;nt&quot;&gt;&amp;lt;/keywords&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;repo&amp;gt;&lt;/span&gt;https://github.com/zswang/light-flashlight.git&lt;span class=&quot;nt&quot;&gt;&amp;lt;/repo&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;issue&amp;gt;&lt;/span&gt;https://github.com/zswang/light-flashlight/issue&lt;span class=&quot;nt&quot;&gt;&amp;lt;/issue&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;js-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/flashlight.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;flashlight&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;clobbers&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;light.flashlight&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/js-module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- android --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;platform&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;config-file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;res/xml/config.xml&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/*&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;feature&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Flashlight&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android-package&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.baidu.light.flashlight.Flashlight&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/config-file&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;config-file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;AndroidManifest.xml&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/*&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.permission.CAMERA&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.permission.FLASHLIGHT&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/config-file&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;source-file&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;src/android/Flashlight.java&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target-dir=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;src/com/baidu/light/flashlight&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/platform&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我就自己写一个&lt;a href=&quot;https://github.com/zswang/light-flashlight&quot;&gt;闪光灯插件&lt;/a&gt; 实现非常简单，供大家参考&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript 关键部分&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cordova&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cordova&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cordova/exec&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flashlight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flashlight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;successCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errorCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;successCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errorCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Flashlight&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;torch&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 调用 Native 的提供的方法，指定回调、Native 对应的类名和动作&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;flashlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;torch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flashlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Android 关键部分&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flashlight&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CordovaPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Camera&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CallbackContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callbackContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCamera&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mCamera&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 打开手电的动作&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFlashMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FLASH_MODE_TORCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;callbackContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 回调 JavaScript&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;百度地图 提供了 Android、JS、iOS 三个版本，正好适合用来做&lt;a href=&quot;https://github.com/zswang/light-map&quot;&gt;地图跨端组件&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;地图跨度组件 Cordova Plugin JavaScript 部分&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cordova&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cordova&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cordova/exec&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baidumap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baidumap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * 初始化&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @param{Object} options 配置项，显示位置&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @param{Function} callback 回调&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;BaiduMap&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;init&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;baidumap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baidumap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;地图跨度组件 Cordova Plugin Android 部分&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaiduMap&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CordovaPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CallbackContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCallbackContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;unchecked&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CallbackContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callbackContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;init&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;JSONObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optJSONObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;JSONArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optJSONArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Native View 在页面中的显示区域&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;top&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;zoom&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;createMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mCallbackContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callbackContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Looper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMainLooper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hashtable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MapView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMaps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hashtable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MapView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CordovaInterface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cordova&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CordovaWebView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cordova&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 初始化百度地图 Android 版本&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BMapManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baiduMapManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BMapManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;baiduMapManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MKGeneralListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onGetNetworkState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onGetPermissionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 注意 JavaScript 调用 Native 会在子线程，如果操作 UI 需放到 主线程中&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mGuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mLat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mZoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mGuid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mLng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mLat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mZoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;deprecation&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;MapView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MapView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaiduMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webView&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;MapController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;GeoPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GeoPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mLat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mLng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mapController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mapController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setZoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mZoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaiduMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getScale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;LayoutParams&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mapView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;BaiduMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 大家注意这一句，将 Native View 添加在 WebView 上，自然就响应页面滚动&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;mMaps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mGuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Web Component，注意适配 runtime 环境&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instances&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LightMapPrototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HTMLDivElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;LightMapPrototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createdCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;116.404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;39.915&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setZoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setZoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCenter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;300&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;300&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 判断当前的运行环境&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;runtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cordova&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;light&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 有可能插件没有安装或者当前版本不支持&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;cordova&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;browser&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;cordova&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBoundingClientRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;guid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageXOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageYOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;instances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;guid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;guid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;browser&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 创建Map实例&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enableScrollWheelZoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 启用滚轮放大缩小&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ScaleControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 添加比例尺控件&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OverviewMapControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 添加缩略地图控件&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;centerAndZoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 初始化地图,设置中心点坐标和地图级别&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;moveend&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Event&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;moveend&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;zoomend&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getZoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;zoom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Event&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;zoomend&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;LightMapPrototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attributeChangedCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attributeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attributeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;zoom&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setZoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LightMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;light-map&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LightMapPrototype&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cordova&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;deviceready&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 等待设备初始化完成&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;调试&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://ripple.incubator.apache.org/&quot;&gt;Ripple&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; 这是一款能在浏览器里模拟移动设备的调试工具，包括模拟 GPS、陀螺仪 等本地能力&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://people.apache.org/%7Epmuellr/weinre/&quot;&gt;Weinre&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;能够在 Chrome 开发者工具里，远程调试的工具&lt;/li&gt;
&lt;li&gt;优势：适用各种设备和浏览器&lt;/li&gt;
&lt;li&gt;不足：加载之前的状态不能获知、不能断点调试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/chrome-developer-tools/docs/remote-debugging&quot;&gt;Remote Debug&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iOS 6 和 Android 4.4 开始，可以原生适用 Remote Debug&lt;/li&gt;
&lt;li&gt;Android 4.4 不仅能打断点，而且还能映射 Web UI （Chrome dev 版本才支持）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外大家在移动端还用过啥 NB 的调试工具，欢迎留言推荐&lt;/p&gt;

&lt;h4&gt;安全考虑&lt;/h4&gt;

&lt;p&gt;用户主动操作才开启重要功能&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;类似 Flash 里访问剪贴板，需要用户主动 Click 才可以访问&lt;/li&gt;
&lt;li&gt;相比弹出个小黄条让用户授权，这种设计体验要好很多&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;明确提示状态&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如：录音和录像时，有明确的状态显示&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;参考资料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.qconbeijing.com/node/535&quot;&gt;本期分享 QCon 链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.techweb.com.cn/data/2014-01-20/1383076.shtml&quot;&gt;艾瑞：2013中国移动互联网市场规模1059亿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.visionmobile.com/blog/2013/12/html5-performance-is-fine-what-we-are-missing-is-tools/&quot;&gt;HTML5 performance is fine, what we are missing is tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnbeta.com/articles/161452.htm&quot;&gt;Adobe 将停止开发移动版 Flash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://techcrunch.cn/2013/09/24/say-goodbye-to-npapi/&quot;&gt;Google将于2014年1月开始屏蔽NPAPI插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.imooc.com/view/92&quot;&gt;When iOS loves JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MobileChromeApps/mobile-chrome-apps&quot;&gt;Chrome apps on Android and iOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/9876268.htm&quot;&gt;响应式网页设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/components-intro/&quot;&gt;Web Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.polymer-project.org&quot;&gt;Polymer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ripple.incubator.apache.org/&quot;&gt;Ripple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://people.apache.org/%7Epmuellr/weinre/&quot;&gt;Weinre&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/chrome-developer-tools/docs/remote-debugging&quot;&gt;Remote Debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/17695875/how-to-use-ripple-emulator-for-windows-to-test-phonegap-application&quot;&gt;How to use Ripple Emulator for Windows to test PhoneGap application?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 01 May 2014 00:00:00 +0800</pubDate>
                <link>http://fex.baidu.com/blog/2014/05/light-component</link>
                <guid isPermaLink="true">http://fex.baidu.com/blog/2014/05/light-component</guid>
            </item>
        
            <item>
                <title>HTML5文件上传组件的深度剖析</title>
                <description>作者：2betop &lt;br&gt; &lt;p&gt;前段时间在&lt;a href=&quot;http://fex.baidu.com/blog/2014/04/fex-w3ctech-happyend/&quot;&gt;w3ctech技术交流会&lt;/a&gt;中分享了&lt;a href=&quot;https://speakerdeck.com/baidufe/ji-yu-html5ji-zhu-de-wen-jian-shang-chuan&quot;&gt;基于 HTML5 技术的文件上传组件&lt;/a&gt;，由于ppt携带的信息非常有限，故在此整理成文章分享出来，供感兴趣的同学阅读。&lt;/p&gt;

&lt;h2&gt;HTML VS FLASH&lt;/h2&gt;

&lt;p&gt;对于文件上传，相信还有不少同学还停留在FLASH时代，其实现在 HTML5 不仅可以实现文件上传，而且可以做得更好。&lt;/p&gt;

&lt;p&gt;以下是对 HTML5 与 FLASH 就文件上传方面的功能调研测试得出的结果。&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能描述&lt;/th&gt;
&lt;th&gt;FLASH&lt;/th&gt;
&lt;th&gt;HTML5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;文件多选&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;格式过滤&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;拖拽（文件 &amp;amp; 文件夹）&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;✗&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;limegreen&#39;&gt;✓&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;截屏粘贴&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;✗&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;limegreen&#39;&gt;✓&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cookie &amp;amp; Session&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;✗&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;limegreen&#39;&gt;✓&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件内容读取&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓ &lt;font color=&#39;limegreen&#39;&gt;快150%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;图片预览&amp;amp;裁剪&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓ &lt;font color=&#39;limegreen&#39;&gt;快200%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件上传&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓ &lt;font color=&#39;limegreen&#39;&gt;快10%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;进度跟踪&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓ &lt;font color=&#39;limegreen&#39;&gt;更加精准&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;PS: 截屏粘贴是指，如果剪切板里面存在图片数据，是可以通过 CTRL + V 将此图片作为文件添加到文件上传组件中的。让剪切板中有图片数据有很多方式：截屏软件（如QQ截屏），浏览器中右击图片点击复制，QQ聊天软件中复制图片...&lt;/p&gt;

&lt;p&gt;可以看出，采用 HTML5 技术与传统的 FLASH 技术相比，能实现的功能更多且性能优势特别明显。&lt;/p&gt;

&lt;p&gt;更多调研细节请移步到&lt;a href=&quot;https://github.com/fex-team/webuploader/tree/research/experiment&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;虽然 HTML5 优势非常明显，但是如果目前支持 HTML5 的浏览器占比情况不理想，采用 HTML5 技术的文件上传还是不能带来足够的收益!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;让我们先来看看由 &lt;a href=&quot;http://thenextweb.com/insider/2014/02/01/ie11-passes-ie10-market-share-firefox-slips-bit-chrome-gains-back-share/&quot;&gt;TNW&lt;/a&gt; 提供的2014年3月份全球浏览器占比图。&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width: 70%&quot; src=&quot;/img/html5-uploader/ie_share_march_2014.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过浏览器占比可以推算出，目前支持 HTML5 的浏览器占比高达64.5%，加上 HTML5 有如此大的优势，看来完全没有理由拒绝采用 HTML5 来实现文件上传了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;但是还有35%的浏览器不支持 HTML5，怎么办？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了考虑最大的兼容性，目前&lt;a href=&quot;http://fex.baidu.com/webuploader&quot;&gt;WebUploader&lt;/a&gt;同时实现了 HTML5 和 FLASH 两套运行时，在不支持 HTML5 的浏览器里面自动切换成 FLASH 方式上传，这样的好处是，既能在条件允许的情况保证 HTML5 发挥出其高效的优势，又能在不支持 HTML5 的浏览器里面保证能正常运行。&lt;/p&gt;

&lt;h2&gt;如何优化文件上传性能？&lt;/h2&gt;

&lt;p&gt;对于文件上传性能优化，可以从两个方面来着手，即上传前的优化和上传过程中的优化。&lt;/p&gt;

&lt;h3&gt;上传前的优化&lt;/h3&gt;

&lt;p&gt;主要有两个思路。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;思路一：通过减少文件体积，减少上传流量来优化。&lt;/li&gt;
&lt;li&gt;思路二：通过合并小文件，减少请求数来优化。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于这两个思路，我们尝试了以下几种方案。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;图片压缩&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果上传的是图片类文件，存在一部分用户喜欢直接选择相机或者手机拍摄的原始文件进行上传，对于这类图片，图片的分辨极高，高达5000多。这就注定了此图片的文件体积不会太小。其实如果只是在电脑上查看，1千多的分辨率就已经足够。于是我们尝试通过js将此类图片进行缩小，得出的结果是：1张(5184×3456)大小为5M的jpg图片，缩小到（1600x1600）后，体积变成了407kb, 直接节省了4.5M的流量。
* ZIP 合并小文件&lt;/p&gt;

&lt;p&gt;类似于拷贝文件夹到U盘，如果小文件比较多，拷贝过程非常慢，通常我们的做法是将文件夹打包成一个文件再拷贝，速度往往要快出许多。其实文件上传也一样，如果能把体积比较小的文件合并成一个文件，请求数就会少了很多，这样是不是就提高了整体文件上传速度呢？&lt;/p&gt;

&lt;p&gt;但是，通过测试得出的结果是不尽如意的。ZIP的运算效率太低，以至于只有在2G网络下才有速度提升，3G和wifi网络下反而变慢了。更多细节请移步到&lt;a href=&quot;https://github.com/fex-team/webuploader/tree/research/experiment/zip&quot;&gt;这里&lt;/a&gt;。
* SPRITE 合并小图片&lt;/p&gt;

&lt;p&gt;类似于css sprite, 将多个小图片画到一张大图片上，通过这种方式来进行合并，思路和zip合并差不多，但是采用的技术不太一样，此方案是直接用canvas来画，经过测试发现速度比zip快出来10倍，总体能带来20%左右的速度提升。&lt;/p&gt;

&lt;p&gt;但是此方案只满足于图片类文件，且服务端需要通过位置信息还原出小文件，带来一定的服务端开发成本，目前并没有采用此方案。更多细节请移步到&lt;a href=&quot;https://github.com/fex-team/webuploader/tree/research/experiment/sprites&quot;&gt;这里&lt;/a&gt;。
* 直接合并文件内容&lt;/p&gt;

&lt;p&gt;其实，并不需要采用ZIP或者SPRIT方式合并文件，把文件读取出 arraybuffer 后是直接可以连接在一起的，之后还可以再次转成 blob 发送到服务端，或者直接发送 arraybuffer，理论上性能应该比SPRITE方案靠谱。&lt;/p&gt;

&lt;p&gt;但是这块没有进行详细的调研，在此就不多说了。&lt;/p&gt;

&lt;h3&gt;上传过程中优化&lt;/h3&gt;

&lt;p&gt;主要采用并发与分块，以下将细说这两个方案。&lt;/p&gt;

&lt;h4&gt;并发上传&lt;/h4&gt;

&lt;p&gt;采用此方案主要是源于单一请求无法让网络达到饱和，于是我们来尝试采用并发方式看能否提高总体文件上传速度。&lt;/p&gt;

&lt;p&gt;以下是通过测试20个1M的文件在不同的并发数下得到的总体上传时间对比图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/html5-uploader/bingfa.png&quot; alt=&quot;并发对比图&quot;&gt;&lt;/p&gt;

&lt;p&gt;很明显，并发数越多速度越快！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;但是，并发数越多，给服务端带来的压力也越大，如何去选择一个合适的并发数呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;主要可以从三方面去考虑。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;并发数越多，服务端压力越大，所以选择并发数不能太大！&lt;/li&gt;
&lt;li&gt;同时每个浏览器都有固定的最大并发数限制，所以选择并发数不能超出这个值。&lt;/li&gt;
&lt;li&gt;从上面的图标可以看出，并发数到了3以后，收益开始渐渐不明显。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如是，最佳的并发数应该是3。&lt;/p&gt;

&lt;p&gt;PS： 以下是常用浏览器的最大并发数信息。根据这个表可以说明为什么前面的测试结果，并发数只测试到了6，原因是chrome的最大并发数是6，当并发设置到7的时候，第7个请求是处于等待状态，直到前面某个请求完成，才会开始有进度。&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;浏览器&lt;/th&gt;
&lt;th&gt;HTTP 1.1&lt;/th&gt;
&lt;th&gt;HTTP 1.0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IE 6, 7&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IE 8&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Firefox2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Firefox3&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Safari 3, 4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chrome 1, 2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chrome 3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chrome 4+&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;为什么并发会更快？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里列出了我个人觉得可能的原因。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;多请求能抢占更多的带宽。&lt;/li&gt;
&lt;li&gt;服务器端可能针对单一请求限速。&lt;/li&gt;
&lt;li&gt;跨域时，并发可以共用options验证请求，浏览器有个特点是，对于跨域请求，如果在一定的时间内，有多个请求，只会发送一个options请求验证的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/html5-uploader/options.png&quot; alt=&quot;options请求共用&quot;&gt;&lt;/p&gt;

&lt;p&gt;左边是非并发的情况，右边为采用并发的情况。可以看出，当不采用并发的时候，每个文件上传请求前都会进行options请求验证，而并发的时候，三个文件上传请求共用了一个opions请求。&lt;/p&gt;

&lt;h4&gt;分块上传&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;为什么要采用分块上传？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;试想一下，如果上传的文件是一个大文件，本来上传时间就相对较久，再加上网络不稳定各种因素影响，容易导致传输中断，用户除了重传&lt;strong&gt;整个文件&lt;/strong&gt;外没有更好的选择。采用分片上传可以很好地解决这个问题。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;什么是分片上传？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;分块上传，就是把一个大的文件分成若干块，一块一块的传输。如上面的case, 如果传输中断，仅需重传出错的分片，而不需要重传整个文件，大大减少了重传开销。&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;height:254px&quot; alt=&quot;&quot; src=&quot;/img/html5-uploader/chunks.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;那么，采用分块上传还有哪些优势？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;更强容错能力&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如以上的case, 出错重传，仅需重传一小块。
* &lt;strong&gt;可以模拟暂停与继续&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于一个http请求，其实并没有暂停功能，要不就是已完成，要不就是已中断。如果不分块，是没法做暂停功能。但是如果采用分块上传，在某个分块上传完了后不自动开始下个分块上传，是不是就实现了暂停功能？&lt;/p&gt;

&lt;p&gt;利用此功能，就可以通过网络检测，在网络断开的时候自动暂停传输，网络恢复后，继续传输，给用户带来更好的体验效果。
* &lt;strong&gt;利用并发提速&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果单独的上传一个大文件，只有采用了分块上传才能利用并发请求来提速。
* &lt;strong&gt;更精准的速度跟踪&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;关于客户端监控上传进度，其实监控的都是客户端的发送速度，服务端有没有接收，有没有存储，是不知道的，只有在整个请求完毕，收到服务端反馈后才能确定数据已经成功接收。这样也就解释了进度显示的时候，长长出现，进度条瞬间到100%，要过一段时间才全部完成。如果采用分块上传，每个分块上传完成，可以确定这个分块服务端已经成功接收。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当然，分块也会有一定的副作用，本来是一个请求，分块后变成了多个请求，自然会带来网络开销。那么具体是个什么的情况呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下是通过测试3个30M的文件在3个并发下调整不同的分片大小得出的总体时间消耗表。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/html5-uploader/chunks_compare.png&quot; alt=&quot;分块对比图&quot;&gt;&lt;/p&gt;

&lt;p&gt;可以看出来，分块越小，时间消耗越大，尤其是分块大小小到256K的时候，时间花费增长特别明显。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;那么，如何选择一个合适的分块大小？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;主要有三个方面的考虑。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;分块越小，请求越多，开销越大。所以不能设置得太小。&lt;/li&gt;
&lt;li&gt;分块越大，灵活度越小，前面所说的那些优势就会相对越不明显。故不能太小。&lt;/li&gt;
&lt;li&gt;服务端一般都会有个固定大小的接受buffer(client&lt;em&gt;body&lt;/em&gt;buffer_size), 分块的大小最好是这个值的整数倍。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;综合这些考虑，推荐的分块大小是2M-5M，具体size根据产品中文件上传的大小分布来定。如果上传的文件大部分是500M以上，很大的文件，建议是5M, 如果相对较小，推荐2M。&lt;/p&gt;

&lt;h2&gt;断点续传&lt;/h2&gt;

&lt;p&gt;有了分块上传，其实我们可以实现更多的功能。试想，如果服务端能够把每个已成功上传的分块都记住，客户端可以快速验证，条件选择跳过某个分块，是不是就实现了断点续传？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;那么，断点续传能带来哪些好处？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;节省流量，避免上传重复的分块。&lt;/li&gt;
&lt;li&gt;减少用户等待时间。&lt;/li&gt;
&lt;li&gt;可恢复的上传。出现中断，就算浏览器刷新或者是换了台电脑也能恢复到上次中断的位置。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那么现在最关键的问题是如何标识一个分块了。怎样标识让服务端好入库，同时客户端可以快速的计算出来与服务端验证，换句话说就是，如何去找出分块的唯一ID。&lt;/p&gt;

&lt;p&gt;之前尝试过文件名+分块编号，或者再加文件大小，文件最后修改时间什么的，都无法保证分块的唯一性。于是还是直接采用 MD5 的方式来序列化文件内容吧，这样就算是文件不同名，只要内容是一致的也会正确地识别出是同一个分块。&lt;/p&gt;

&lt;p&gt;那么现在的逻辑就是，每次分块上传前，根据内容 MD5 序列化，得到一个唯一ID，与服务端验证，如果此分块已经存在于服务端，则直接跳过此分块上传，否则上传此分块，成功后，服务端记下此分块ID。&lt;/p&gt;

&lt;p&gt;如是，分块上传是不是具有了秒传的功能？既然分块能秒传，那么整个文件是否也可以秒传？&lt;/p&gt;

&lt;h2&gt;秒传&lt;/h2&gt;

&lt;p&gt;分块能秒传，整个文件当然也能秒传，关键还是看 MD5 的性能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/html5-uploader/md5.png&quot; alt=&quot;md5性能&quot;&gt;&lt;/p&gt;

&lt;p&gt;通过以上测试结果可以看出，如果文件大小在 10M 以内，是可以真正的秒级内完成的，大于这个值时间花费就大于1秒了，比如一个200M的文件 MD5 时间花费需要13秒左右。&lt;/p&gt;

&lt;p&gt;但是，即便如此，相比于文件传输时间花费，MD5 的时间花费根本就不算什么。对于类似于百度云，文库这类的产品，在上传一个文件的时候很可能服务端已经存在了此文件，如果多等个几秒钟，能跳过整个文件上传，我觉得是非常划算的。&lt;/p&gt;

&lt;p&gt;另外，如果是一次上传多个文件是可以在算法上去优化这个过程的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;验证过程提前到当前文件的传输期&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果当前文件已经在传输了，这个时候，用户是处于等待状态，机器也处于等待期，如果把下一个文件的验证过程移至此过程，那么用户的等待 MD5 的时间和等待当前文件传输完成的时间就重合了。这样用户就只需要等待第一个文件的验证过程。
* 小文件优先处理，减少用户等待时间&lt;/p&gt;

&lt;p&gt;因为第一个文件的验证等待无法避免，如果第一个文件处理的文件越小，是不是等待的时间就越短？所以把队列中最小的一个文件放到第一个优先处理可以进一步减少用户等待时间
* 更换序列化算法，取段MD5&lt;/p&gt;

&lt;p&gt;其实对于某些二进制文件，如JPEG，前面一段数据记录了很多此图片的信息，比如：拍摄时间，相机名称，图片尺寸，图片旋转度等等，直接 MD5 这一段数据基本上就可以保证此文件的唯一性了。只要取段的总大小小于10M，再大的文件也能在1秒内完成序列号工作。&lt;/p&gt;

&lt;h2&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fex.baidu.com/webuploader&quot;&gt;WebUploader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fex-team/webuploader/issues/142&quot;&gt;如何基于WebUploader实现断点续传和秒传&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fex-team/webuploader/tree/research/experiment/zip&quot;&gt;Zip方案调研&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fex-team/webuploader/tree/research/experiment/sprites&quot;&gt;Sprite方案调研&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fex-team/webuploader/tree/research/experiment/&quot;&gt;上传调研&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Tue, 22 Apr 2014 00:00:00 +0800</pubDate>
                <link>http://fex.baidu.com/blog/2014/04/html5-uploader</link>
                <guid isPermaLink="true">http://fex.baidu.com/blog/2014/04/html5-uploader</guid>
            </item>
        
            <item>
                <title>实时协同编辑的实现</title>
                <description>作者：nwind &lt;br&gt; &lt;p&gt;在最近某个项目中打算使用协同编辑来解决冲突问题，因此抽空调研了现有的实现方案，结果发现要想做完美是很难的，但我们可以低成本地做到不错的效果，本文将介绍几种实现方法，大家在项目中如果有需要可以参考。&lt;/p&gt;

&lt;h2&gt;什么是实时协同编辑&lt;/h2&gt;

&lt;p&gt;这里所说的实时协同编辑，是指多人同时编辑一个文档，最典型的例子是 Google Docs，你可以实时看到别人做出的修改，不用手动刷新页面。&lt;/p&gt;

&lt;p&gt;要实现实时编辑，我们需要解决两个技术点：实时通信问题、编辑冲突问题，其中实时通信问题比较好解决，可以使用 long pull 或 WebSocket，所以这里就不过多讨论了，重点将放在如何解决编辑冲突问题上。&lt;/p&gt;

&lt;h2&gt;可选方案&lt;/h2&gt;

&lt;p&gt;接下来将从易至难的顺序来介绍几种可行的方案，分别是：「编辑锁」、「GNU diff-patch」、「Myer&amp;#39;s diff-patch」、「Operational Transformation」和「分布式 Operational Transformation」。&lt;/p&gt;

&lt;h3&gt;编辑锁&lt;/h3&gt;

&lt;p&gt;编辑锁这是实现协同编辑最简单的方法，简单来说就是当有人在编辑某个文档时，系统会将这个文档锁定，避免其他人同时编辑，因为实现简单，所以这个方案是应用最广的，比如公司内部常用的 TWiki 系统，采用这种方式虽然可以在一定程度上避免覆盖问题，但它的使用体验不好，也做不到「实时」，所以这里就不讨论了。&lt;/p&gt;

&lt;h3&gt;GNU diff-patch&lt;/h3&gt;

&lt;p&gt;Git 等版本管理软件其实也是一种协同编辑工具，因为每个人都可以并行编辑，遇到编辑同一个文件时可以自动合并，因此我们也能使用类似的原理来实现协同编辑，具体可以有两种方法：diff-patch 和 merge。&lt;/p&gt;

&lt;p&gt;先说 diff-patch，这里的 diff 和 patch 是指两个 unix 下的命令，diff 能输出两个文本的不同之处，然后用 patch 来更新其它文件，我们只要在 JS 中实现这两个算法，就能通过如下流程来实现协同编辑：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每个用户进来时都建立长连接，保存好当前文档副本&lt;/li&gt;
&lt;li&gt;有人编辑时，如果停顿 5 秒（具体要根据产品策略），就将现有文档和之前的副本进行 diff，将结果传给服务端，更新副本&lt;/li&gt;
&lt;li&gt;服务端更新文档，然后通过长连接将这个 diff 结果发给同时在编辑的其它用户，这些用户使用 patch 方法来更新 ta 们文档&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但 GNU diff 有个问题，因为基于行匹配的，所以很容易冲突，让我们测试一下「百度 Web」和「百度 Web 前端」这两段文本的 diff 结果&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[nwind@fex ~]$ diff old.txt other-new.txt &amp;gt; old-to-other-new.patch&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[nwind@fex ~]$ cat old-to-other-new.patch&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1c1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt; 百度 Web&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt; 百度 Web 前端
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个 diff 结果中，&lt;code&gt;1c1&lt;/code&gt; 的第一个「1」代表修改前的第一行，后面的「c」代表「修改」，第二个「1」代表修改后的行，也就是说将第一行的「百度 Web」改成「百度 Web 前端」，修改后的内容放第一行。也就意味着如果两人同时修改一行就会冲突，可以通过下面的测试来确认：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[nwind@fex ~]$ cat my-new.txt&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Web&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;[nwind@fex ~]$ patch my-new.txt &amp;lt; old-to-other-new.patch&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;patching file b-new.txt&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hunk #1 FAILED at 1.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1 out of 1 hunk FAILED -- saving rejects to file my-new.txt.rej&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;[nwind@fex ~]$ cat my-new.txt.rej&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;***************&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;*** 1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;- 百度 Web--- 1 -----&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+ 百度 Web 前端&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 &lt;code&gt;my-new.txt&lt;/code&gt; 是我修改的版本，我去掉了前面的「百度 」，只留下「Web」，其实这两处修改是不冲突的，它们可以合并成「Web 前端」，如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/realtime-collaboration/merge.png&quot; alt=&quot;merge&quot;&gt;&lt;/p&gt;

&lt;p&gt;但使用 patch 命令部下，它在冲突后会生成一个新文件 &lt;code&gt;my-new.txt.rej&lt;/code&gt; 来描述失败原因，这种展现方式不直观，需要打开两个文件比对，我们使用另一种方式来更好地展现，那就是接下来介绍的 merge 命令，它的使用方法如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[nwind@fex ~]$ merge my-new.txt old.txt other-new.txt&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;merge: warning: conflicts during merge&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;[nwind@fex ~]$ cat my-new.txt&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; my-new.txt&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Web=======&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;百度 Web 前端&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; other-new.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到它直接将冲突的地方写到 &lt;code&gt;my-new.txt&lt;/code&gt; 里了，这点比 patch 看起来要方便些，对于这个结果估计大部分同学都会眼熟，因为 merge 命令和 Git 等工具&lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/git-merge.txt#L211&quot;&gt;中的合并算法是一样的&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;通过使用我们可以发现 merge 命令有个缺点，那就是需要使用 3 份完整的文本来进行比较，为了避免每次传递所有文本内容，我们可以结合使用 diff 来减小传输体积，在后端 patch 成新的文本。&lt;/p&gt;

&lt;p&gt;无论是 diff 还是 merge，由于它们的算法都是基于行进行比较，导致对同一行的编辑必然冲突，为了解决这个问题，我们可以尝试基于字符粒度的 diff 算法，那就是接下来将介绍的 Myer&amp;#39;s diff-patch。&lt;/p&gt;

&lt;h3&gt;Myer&amp;#39;s diff-patch&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://neil.fraser.name/software/diff_match_patch/myers.pdf&quot;&gt;Myer 算法&lt;/a&gt;是另一种 diff-patch 算法，它有很多&lt;a href=&quot;https://code.google.com/p/google-diff-match-patch/&quot;&gt;语言的开源实现&lt;/a&gt;，这里我们就不介绍细节算法了，直接用之前的例子来测试它的效果，首先看一下它的 diff 结果，调用代码如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;old_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;百度 Web&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;百度 Web 前端&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;diff_match_patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patch_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patch_make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;old_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;patch_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patch_toText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patch_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;decodeURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patch_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果为&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@@ -1,6 +1,9 @@
 百度 Web
+ 前端
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中第一行的 &lt;code&gt;-&lt;/code&gt; 和 &lt;code&gt;+&lt;/code&gt; 两个符号没有什么意义，这句话表示修改处之前的起始位置为 1（由于数组是从 0 开始的，所以内部计算时会先减一），长度为 6，后面的 &lt;code&gt;1,9&lt;/code&gt;，表示修改后的起始位置为 1，长度为 9。在接下来的两段文本代表修改的地方，注意「百度 Web」前面有空格，这代表相等，也就是直接添加这个字符串，而后面的 &lt;code&gt;+&lt;/code&gt; 代表添加文本，具体细节可以通过它的&lt;a href=&quot;https://code.google.com/p/google-diff-match-patch/source/browse/trunk/javascript/diff_match_patch_uncompressed.js#2100&quot;&gt;实现源码&lt;/a&gt;了解。&lt;/p&gt;

&lt;p&gt;因此确定它的 diff 策略是基于字符匹配的，这样能否解决我们之前遇到的冲突问题呢？接下来来测试一下，源码如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//相关代码同上&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patch_fromText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patch_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patch_apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Web&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Web 前端&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个输出结果是正确的，也就是说它能很好地解决之前的问题，但如果是同一个位置的修改会怎样？我继续做了几个实验：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;old_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;百度 Web&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;other_new_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;百度 Web 后端&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;my_new_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;百度 Web 前端&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//结果为「百度 Web 前端 后端」&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;old_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;百度 Web 前端&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;other_new_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;百度 Web 后端&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;my_new_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;百度 Web 全端&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//结果为「百度 Web 后端」&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;old_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;百度 Web&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;other_new_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Web 前端&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;my_new_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;百度 FE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//结果为「FE 前」 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个例子是在后面添加不同的字符，它的结果是两个添加都生效，第二个例子是在同一处修改成不同的字符，它的结果是别人的修改生效，但最后一个例子出错了，丢失了「端」字，这里看起来还好，但如果内容是富文本就有问题了，比如 &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; 少了 &lt;code&gt;&amp;gt;&lt;/code&gt; 是不行的。&lt;/p&gt;

&lt;p&gt;整体来看 Myer 算法可以低成本地解决大部分问题，所以有些在线编辑器选择它来实现协同编辑功能，比如 &lt;a href=&quot;http://codebox.io&quot;&gt;codebox&lt;/a&gt;，它的客户端代码&lt;a href=&quot;https://github.com/FriendCode/codebox/blob/master/client/utils/filesync.js&quot;&gt;在这&lt;/a&gt;，服务端代码&lt;a href=&quot;https://github.com/FriendCode/codebox/blob/master/core/cb.files.sync/models/document.js&quot;&gt;在这&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;不过 Myer 在某些情况下会丢字符，是否还有更好的方法？答案是有，那就是接下来介绍的 Operational Transformation 技术。&lt;/p&gt;

&lt;h3&gt;Operational Transformation&lt;/h3&gt;

&lt;p&gt;Operational Transformation（下面简称 OT）技术正是 Google Docs 中所采用的方案，因此是经过验证的，值得研究。&lt;/p&gt;

&lt;p&gt;最开始我一直觉得 OT 会很复杂，因为它的相关介绍文章都写得很长，比如&lt;a href=&quot;http://www3.ntu.edu.sg/home/czsun/projects/otfaq/&quot;&gt;这篇&lt;/a&gt;及维基百科上的&lt;a href=&quot;http://en.wikipedia.org/wiki/Operational_transformation&quot;&gt;介绍&lt;/a&gt;，不过看了之后才后发现它的原理并不复杂，我将在这里进行简单的说明。&lt;/p&gt;

&lt;p&gt;首先，我们可以将文本内容修改转成以下 3 种类型的操作(Operational)：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;retain(n)：保持 n 个字符，也就是说这 n 个字符不变&lt;/li&gt;
&lt;li&gt;insert(str)：插入字符 str&lt;/li&gt;
&lt;li&gt;delete(str)：删除字符 str&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举个例子，假设 A 用户将「百度 Web」变成「Web 前端」，相当于产生了如下 3 个操作：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;delete(&amp;#39;百度 &amp;#39;),  //删掉「百度 」
retain(3),       //跳过 3 个字符（也就是「Web」）
insert(&amp;#39; 前端&amp;#39;)   //插入「 前端」
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提取这些操作可以通过 Levenshtein distance（编辑距离）算法来实现。那它如何解决冲突问题了？比如这时如果 B 用户将「百度 Web」改成了「百度 FE」，B 所生产的操作步骤将会是如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;retain(3),       //跳过 3 个字符（也就是「百度 」）
delete(&amp;#39;Web&amp;#39;),
insert(&amp;#39;FE&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果我们先应用 A 的操作，将字符串变为「Web 前端」，然后再应用 B 的操作时就会失效，因为在执行 B 的第二个操作 &lt;code&gt;delete(&amp;#39;Web&amp;#39;)&lt;/code&gt; 时并没有「Web」，这时从第四个字符开始已经变成了「 前端」。&lt;/p&gt;

&lt;p&gt;因此我们需要转换 B 的操作来适应新的字符串，比如调成如下操作：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;delete(&amp;#39;Web&amp;#39;),
insert(&amp;#39;FE&amp;#39;),
retain(3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个转换算法就是 OT 的核心，实际上 OT 指的是一类技术，而不是具体的算法，这个思路就是首先将编辑转成操作(Operational)，如果多人操作同时进行，需要对这些操作进行转换(Transformation)，这就是为什么叫 Operational Transformation，而具体应该拆分成哪些操作以及转换算法都是可以自定义的，因此 OT 可以灵活地支持各种协同编辑应用，比如非文本类的编辑。&lt;/p&gt;

&lt;p&gt;回到之前 Myer 算法导致丢字符的那个例子，我们看看 OT 是否能解决，这里我使用了一个开源库 &lt;a href=&quot;https://github.com/marcelklehr/changesets&quot;&gt;changesets&lt;/a&gt;，以下是基于它实现合并的例子：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Changeset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;changesets&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;百度 Web&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Web 前端&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;百度 FE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;csA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromDiff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;csB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromDiff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;csB_new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;csB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transformAgainst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;csA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这里这就是操作转换&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textA_new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;csA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;csB_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textA_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//结果是「 前端FE」&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果并不正确，正确的应该是「FE 前端」，查看一下 &lt;code&gt;csB_new&lt;/code&gt; 的内容，发现它实际上是转换成了如下操作：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;delete(3),   //注意 changesets 在这里的参数不是字符串而是数字，它会直接删掉 3 个字符，不够内容是什么
retain(3),
insert(&amp;#39;FE&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意这并不是 OT 技术本身的问题，而是 changesets 所实现的转换算法问题，虽然不够完美，但和之前的 Myer 算法相比，至少没丢字符，后来我又做了几个测试，发现 OT 技术的准确率比 Myer 高，因此它是最适合用于协同编辑的技术。&lt;/p&gt;

&lt;h3&gt;分布式 Operational Transformation&lt;/h3&gt;

&lt;p&gt;如果看完上面的文章你觉得实现实时协同编辑似乎不难，那你就错了，因为我们之前都没有考虑分布式的问题，OT 技术在学术界都研究 20 多年了，至今也没人总结出一个最好的方法，前 Google Wave 工程师在 &lt;a href=&quot;http://sharejs.org/&quot;&gt;ShareJS&lt;/a&gt; 首页上这样写道：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unfortunately, implementing OT sucks. There&amp;#39;s a million algorithms with different tradeoffs, mostly trapped in academic papers. The algorithms are really hard and time consuming to implement correctly.
I am an ex Google Wave engineer. Wave took 2 years to write and if we rewrote it today, it would take almost as long to write a second time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以其实要做好是很难的，这里面最麻烦的就是分布式导致的问题，接下来将介绍 3 个我能想到的问题及解决方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 顺序问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先第一个问题是顺序问题，因为 OT 等算法都是依赖顺序的，不同顺序会导致结果不同，我们通过下面这张图来说明：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/realtime-collaboration/order-problem.png&quot; alt=&quot;order-problem&quot;&gt;&lt;/p&gt;

&lt;p&gt;假设 &lt;code&gt;Client A&lt;/code&gt; 在做两次修改时发了两个异步请求，可能因为网络延迟导致第二个请求反而先到了，导致最终服务器版本和 &lt;code&gt;Client A&lt;/code&gt; 所看到的不一致，同样在服务器发往其它客户端的请求时也会出现乱序的问题，如图中 &lt;code&gt;Client B&lt;/code&gt; 也有问题。&lt;/p&gt;

&lt;p&gt;这个问题的解决方法很简单，我们可以在客户端和服务器端都加上队列来保证请求顺序，等前一个请求结束后再发下一个请求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 存储的原子操作&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果有多台服务器，或者有多个线程/进程在同时处理请求时就会遇到覆盖问题，因为读写数据库并不是原子操作，比如下面的例子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/realtime-collaboration/data-atomic.png&quot; alt=&quot;data-atomic&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Web Server A&lt;/code&gt; 和 &lt;code&gt;Web Server B&lt;/code&gt; 同时访问数据库，结果导致 &lt;code&gt;Web Server A&lt;/code&gt; 的修改被覆盖了。&lt;/p&gt;

&lt;p&gt;好在这种问题还算比较常见，解决办法可以有 3 种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;保证操作只在一个线程中执行，比如某个文档的更新只在某个固定的机器，使用 Node 这样的单线程模型提供服务，这样就不可能并行修改了&lt;/li&gt;
&lt;li&gt;如果数据库支持事务(transaction)，可以通过事务来解决&lt;/li&gt;
&lt;li&gt;如果数据库不支持事务，就只能用分布式锁了，如 ZooKeeper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从实现角度来看，第一和第二种方法都比较简单，而第三种方法会带来很多问题，比如可能导致文档被锁死，假如上锁后由于种种原因没有执行解锁操作，这个文档就会永远被锁住，所以还得加上超时限制等策略。&lt;/p&gt;

&lt;p&gt;然而在解决了原子操作后，我们将发现一个新的问题，那就是版本管理问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 版本管理问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在前面的例子中，两段新文本的修改都是基于同一个旧版本的，如果旧版本不一样，就有可能出错，具体可以通过下面这张图来解释：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/realtime-collaboration/version-problem.png&quot; alt=&quot;version-problem&quot;&gt;&lt;/p&gt;

&lt;p&gt;在这个例子中，Web Server A 接收到操作命令是将「a」文本改成「aa」，Web Server B 接收到操作命令是将「a」文本改成「ab」，这里我们加上了锁机制来避免同时读写数据，Web Server A 首先得到了锁，然后修改并更新数据，而 Web Server B 需要先等待数据解锁，等 Web Server B 拿到数据后它已经从「a」变成了「aa」，如果还按照 &lt;code&gt;retain(1), insert(&amp;#39;b&amp;#39;)&lt;/code&gt; 进行修改，数据将变成「ab」，而不是正确的「aab」，引起这个问题的原因就是旧版本不一致，Web Server B 需要根据 Web Server A 的操作进行操作转换，变成 &lt;code&gt;retain(2), insert(&amp;#39;b&amp;#39;)&lt;/code&gt;，然后才能对数据进行修改。&lt;/p&gt;

&lt;p&gt;因此想要解决这个问题，就必须引入版本，每次修改后都需要存储下新版本，有了版本我们就能使用 diff 功能来计算不同版本的差异，得到其它人修改的内容，然后通过 OT 合并算法合并两个操作，如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/realtime-collaboration/version-solution.png&quot; alt=&quot;version-problem&quot;&gt;&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;Web Server A&lt;/code&gt; 操作前数据版本是 &lt;code&gt;v=1&lt;/code&gt;，操作后变成了 &lt;code&gt;v=2&lt;/code&gt;，等到 &lt;code&gt;Web Server B&lt;/code&gt; 处理的时候，它通过版本比较发现不一致，所以就首先通过编辑距离算法算出 &lt;code&gt;Web Server A&lt;/code&gt; 所做的操作，然后用这个操作来对自己的操作进行转换，得到正确的新操作，从而避免了覆盖问题。&lt;/p&gt;

&lt;p&gt;如果保存所有版本会导致数据量大大增加，所以还需要再优化，比如每个服务器保存一个数据副本，但这里就不再展开了，可以看要支持分布式 还是挺麻烦的，不过目前出现了一些前后端整合的方案，如 &lt;a href=&quot;http://sharejs.org/&quot;&gt;ShareJS&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/opencoweb/coweb&quot;&gt;OpenCoweb Framework&lt;/a&gt;，可以参考。&lt;/p&gt;

&lt;p&gt;另外之前提到的 Myer&amp;#39;s diff 算法也有分布式解决方案，具体细节可以参考&lt;a href=&quot;https://neil.fraser.name/writing/sync/&quot;&gt;这篇文档&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;初步结论&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;如果你只是一个内部小项目，实时性要求不高，但对准确性要求比较高

&lt;ul&gt;
&lt;li&gt;推荐用 merge 或 diff3 工具，出现同一行冲突时由用户来解决，这样能避免自动合并有可能出错的问题&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如果想具备一定的实时性，流量不大，不想实现太复杂，且对少量的冲突可以忍受

&lt;ul&gt;
&lt;li&gt;推荐用 Myer&amp;#39;s diff，后端只开一个 Node 进程&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如果想具备实时性，且有多台后端服务同时处理

&lt;ul&gt;
&lt;li&gt;可以用 Operational Transformation 或 Myer&amp;#39;s diff，但需要注意分布式带来的问题&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如果需要很精细的控制，如支持富文本编辑等非单纯文本格式

&lt;ul&gt;
&lt;li&gt;只能使用 Operational Transformation，但要自己实现操作合并算法，比如 XML 可以参考&lt;a href=&quot;http://www.codecommit.com/blog/java/understanding-and-applying-operational-transformation&quot;&gt;这篇文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;后续&lt;/h2&gt;

&lt;p&gt;除了文本合并，真正要做在线编辑还有很多细节处理，感兴趣的同学可以继续研究：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持选区，看到其他人选择的文本段，当然，这也有合并问题&lt;/li&gt;
&lt;li&gt;指针要更随文本变化移动到正确的位置&lt;/li&gt;
&lt;li&gt;支持 undo&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Mon, 21 Apr 2014 00:00:00 +0800</pubDate>
                <link>http://fex.baidu.com/blog/2014/04/realtime-collaboration</link>
                <guid isPermaLink="true">http://fex.baidu.com/blog/2014/04/realtime-collaboration</guid>
            </item>
        
            <item>
                <title>FEX官网诞生记 + 完整PSD下载</title>
                <description>作者：Rayi &lt;br&gt; &lt;h2&gt;这又是拖延症爆发的结果&lt;/h2&gt;

&lt;p&gt;本来早就说在网站上线后就写一篇这样的文章的，结果拖延症犯了，一直到现在还没写好。&lt;/p&gt;

&lt;p&gt;最近实在是觉得无颜再拖，所以赶紧写出来给大家随便瞅瞅。 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;请勿拍砖，拍砖请自带砖头！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;且先说说这个网站&lt;/h2&gt;

&lt;p&gt;网站也就是目前百度FEX团队的官网了，之前接到任务后，花了一些时间做了设计图，然后就开始开工去做静态页面了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/about-this-site/site.png&quot; alt=&quot;网站设计稿&quot;&gt;&lt;/p&gt;

&lt;p&gt;不过因为要用&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;来搭建，所以又去了解了一下&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;的相关信息。至于为什么选择了&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;，且听我慢慢道来。&lt;/p&gt;

&lt;p&gt;目前FEX的官网使用的是&lt;a href=&quot;http://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;的服务，你可以到 &lt;a href=&quot;http://pages.github.com/&quot;&gt;这里&lt;/a&gt; 来查了解关于更多&lt;a href=&quot;http://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;的信息。&lt;/p&gt;

&lt;p&gt;网站的设计图也放出来给大家了，如果对网站有兴趣的，可以到我们的&lt;a href=&quot;http://github.com/fex-team/fex-team.github.io/&quot;&gt;网站代码github&lt;/a&gt;上去&lt;a href=&quot;http://github.com/fex-team/fex-team.github.io/&quot;&gt;fork&lt;/a&gt;一份代码，整个网站都是开源的。&lt;/p&gt;

&lt;p&gt;如果你有对代码做了什么修正，也欢迎 pull request 提交代码给我们！&lt;/p&gt;

&lt;h2&gt;为什么用 Jekyll&lt;/h2&gt;

&lt;p&gt;首先 &lt;a href=&quot;http://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;的服务本身是不能运行类似php这样的动态语言的，因此一般大家都常用的方法是写静态页面。&lt;/p&gt;

&lt;p&gt;那么可选的方案一般就是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;自己写静态页面，每次写了之后更新。&lt;/li&gt;
&lt;li&gt;通过一些工具来实现静态页面创建。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但同时，我们还有一些其他需求：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;文章能用&lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;markdown&lt;/a&gt;格式来写，不涉及展现的html代码。&lt;/li&gt;
&lt;li&gt;整个网站放在&lt;a href=&quot;https://github.com/&quot;&gt;github&lt;/a&gt;上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;于是结合起来方案就是利用工具来维护，生成静态页面，然后更新到&lt;a href=&quot;https://github.com/&quot;&gt;github&lt;/a&gt;上。但是这种方案的问题是，每次提交前必须要生成静态页面，而这个动作不太好做成自动进行的（因为我们的文章作者有很多，不一定大家都想的起来做这个动作）。
那自然，我们想去了解是否能提交后生成静态页面呢？？&lt;/p&gt;

&lt;p&gt;我们看到&lt;a href=&quot;http://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;支持了&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;，意味着当你将&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;的项目代码提交后，会自动给你生成相应的静态页面。于是我们的问题愉快的被解决了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里插播一下，除了&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;之外，其实还有一些其他工具方案来生成页面的，大家不妨看以下 Rank 写的这篇 &lt;a href=&quot;http://rank.im/2014/03/10/hexo-for-blog/&quot;&gt;《用 hexo 在 github page 搭建博客》&lt;/a&gt;，里面有提到其他的工具方案。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;其他杂七杂八的&lt;/h2&gt;

&lt;p&gt;个性化域名设置，去看&lt;a href=&quot;https://github.com/&quot;&gt;github&lt;/a&gt;的文档就行，或者直接穿越去看看: &lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-pages&quot;&gt;https://help.github.com/articles/setting-up-a-custom-domain-with-pages&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;评论系统本来之前用的 &lt;a href=&quot;http://disqus.com/&quot;&gt;Disqus&lt;/a&gt;,但是因为毕竟是国外服务，加载速度上有点慢，所以最后改成了&lt;a href=&quot;http://duoshuo.com&quot;&gt;多说&lt;/a&gt;，速度快多了，而且可以微博登录哦。&lt;/p&gt;

&lt;p&gt;其他好像没什么想介绍的了，如果有对其他信息感兴趣的，欢迎留言评论！&lt;/p&gt;

&lt;p&gt;对了！我在文章列表那里参考了&lt;a href=&quot;http://ued.taobao.org/blog/&quot;&gt;淘宝UED&lt;/a&gt;的文章块样式，这个得写出来，不然就是刺果果的抄袭而且不承认了！&lt;/p&gt;

&lt;h2&gt;福利包&lt;/h2&gt;

&lt;p&gt;如之前所说，我把网站设计稿和一些Banner图片的设计稿都扔出来了。&lt;/p&gt;

&lt;p&gt;如果，我是说如果你对我们的官网设计感兴趣，那么，你可以移步到 &lt;a href=&quot;http://pan.baidu.com/s/1qWFaF5i&quot;&gt;下载PSD文件&lt;/a&gt;来下载相应的PSD文件。其中包括首页和文章页的设计稿。&lt;/p&gt;

&lt;p&gt;也欢迎看看我之前写的其他文章： &lt;a href=&quot;/blog/2014/04/fex-w3ctech-happyend/&quot;&gt;《妹纸+基友技术交流会，有图有真相哦！》&lt;/a&gt; &lt;/p&gt;
</description>
                <pubDate>Wed, 16 Apr 2014 00:00:00 +0800</pubDate>
                <link>http://fex.baidu.com/blog/2014/04/about-this-site</link>
                <guid isPermaLink="true">http://fex.baidu.com/blog/2014/04/about-this-site</guid>
            </item>
        
            <item>
                <title>如何高效地管理网站静态资源</title>
                <description>作者：walter &lt;br&gt; &lt;h2&gt;背景&lt;/h2&gt;

&lt;p&gt;随着互联网开发和迭代速度越来越快，网站也变得越来越庞大，存在大量静态资源，我们原有管理静态资源的方式变得越来越不适用，就如同封面图一样，静态资源之间的关系错综复杂，给工程师带来了很多麻烦：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;人工管理依赖的噩梦，工程师需要频繁管理和维护每个页面需要的 JS &amp;amp; CSS 文件，包括静态资源之间的依赖关系以及加载顺序等。&lt;/li&gt;
&lt;li&gt;性能优化成本高且不可持续性，为了提高网站性能，工程师总是在忙于优化页面静态资源的加载，包括动态加载静态资源、按需加载静态资源和修改静态资源合并策略等，但是过了一段时间性能又降下来了，又需要周而复始的重复。&lt;/li&gt;
&lt;li&gt;静态资源差异化的挑战，PC和无线的适配，不同的网络和终端需要适配相应的静态资源；当网站需要支持国际化的时候，需要对不同的国家进行差异化处理，返回不同的静态资源，这些需求对原有的静态资源管理方式提出巨大挑战。&lt;/li&gt;
&lt;li&gt;缺少快速迭代和试验新功能的有效支持，从开发到上线流程繁琐，导致项目迭代周期长&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每天工程师都会提交大量的 new feature/bug fixes，每次项目发布和迭代都面临着以上的问题，是否可以有一套系统帮助我们管理/调度静态资源来减少人工管理静态资源成本和风险，来达到更快、更可靠、低成本的自动化项目交付。在实际项目开发中，我们进行了大量探索和试验，实现了一套 “静态资源管理系统”，对静态资源进行全流程的管理和调度：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;帮助工程师管理静态资源间的依赖以及资源的加载&lt;/li&gt;
&lt;li&gt;管理静态资源版本更新与缓存，自动处理CDN&lt;/li&gt;
&lt;li&gt;自动生成最优的静态资源合并策略，实现网站自适应优化&lt;/li&gt;
&lt;li&gt;实现静态资源的分级发布，快速迭代，轻松回滚&lt;/li&gt;
&lt;li&gt;根据国际化和终端的差异，送达不同的资源给不同的用户&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面本文将会介绍我们是如何通过静态资源系统来高效管理静态资源的。&lt;/p&gt;

&lt;h2&gt;架构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/fis-static-resource-management/arc.png&quot; alt=&quot;arc&quot;&gt;&lt;/p&gt;

&lt;p&gt;静态资源管理系统主要包含Compile、Sourcemap、Backend-Framework、Frontend-Loader几个核心模块：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compile，对静态资源进行编译处理，包括对静态资源进行预处理，url 处理(添加md5戳、添加CDN前缀)，优化(压缩、合并)，生成 Sourcemap 等&lt;/li&gt;
&lt;li&gt;Sourcemap，在 compile 阶段系统会扫描静态资源，建立一张静态资源关系表，记录每个静态资源的部署路径以及依赖关系等信息&lt;/li&gt;
&lt;li&gt;Backend-Framework，后端运行时根据组件使用情况来调度静态资源，为前端返回页面渲染需要的资源。&lt;/li&gt;
&lt;li&gt;Frontend-Loader，前端运行时根据用户的交互行为动态请求静态资源。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;静态资源管理系统通过自动化工具对静态资源进行预处理并产出 Sourcemap，SourceMap 中记录着静态资源的调度信息，这样框架在运行时会根据 SourceMap 中提供的调度信息自动为用户进行静态资源调度，不仅可以做到送达不同资源给不同用户，还可以自适应优化静态资源合并和加载。&lt;/p&gt;

&lt;h2&gt;自动管理静态资源依赖&lt;/h2&gt;

&lt;p&gt;静态资源管理系统为工程师提供了声明依赖关系的语法和规则，在 compile 阶段系统会扫描静态资源，建立一张静态资源关系表，记录每个静态资源的部署路径以及依赖关系等信息。&lt;/p&gt;

&lt;h3&gt;在html中声明依赖&lt;/h3&gt;

&lt;p&gt;在项目的 index.html 里使用注释声明依赖关系：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    @require demo.js&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    @require &amp;quot;demo.css&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 SourceMap 中则可看到：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;res&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;demo.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;uri&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/static/css/demo_7defa41.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;css&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;demo.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;uri&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/static/js/demo_33c5143.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;deps&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;demo.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;uri&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/index.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;deps&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;demo.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;demo.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;pkg&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;在js中声明依赖&lt;/h3&gt;

&lt;p&gt;支持识别 js 文件中的 require 函数，或者 注释中的 @require 字段 标记的依赖关系，这些分析处理对 html 的 script 标签内容 同样有效。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//demo.js&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @require demo.css&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @require list.js&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在SourceMap中则可看到：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;res&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;demo.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;uri&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/static/js/demo_33c5143.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;deps&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;demo.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;list.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jquery&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;pkg&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;在css中声明依赖&lt;/h3&gt;

&lt;p&gt;支持识别 css 文件 注释中的 @require 字段 标记的依赖关系，这些分析处理对 html 的 style 标签内容 同样有效。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//demo.js&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @require demo.css&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @require list.js&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在SourceMap中则可看到：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;res&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;demo.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;uri&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/static/js/demo_33c5143.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;deps&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;demo.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;list.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jquery&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;pkg&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;按需加载静态资源&lt;/h2&gt;

&lt;p&gt;在静态资源管理系统接管了项目中的静态资源后，可以知道静态资源的运行情况以及依赖关系，然后可以做到自动为页面按需加载静态资源，下面通过一个例子来详细讲解：&lt;/p&gt;

&lt;p&gt;sidebar.tpl 中的内容如下，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    @require &amp;quot;common:ui/dialog/dialog.css&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;--&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;btn-navbar&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;btn-navbar&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

{script}
    var sidebar = require(&amp;quot;common:ui/dialog/dialog.js&amp;quot;);
    sidebar.run();
{/script}

{script}
    $(&amp;#39;a.btn-navbar&amp;#39;).click(function() {
        require.async(&amp;#39;common:ui/dialog/dialog.async.js&amp;#39;, function( dialog ) {
            dialog.run();
        });
    });
{/script}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对项目编译后，自动化工具会分析依赖关系，并生成 sourcemap，如下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;common:widget/sidebar/sidebar.tpl&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;uri&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;common/widget/sidebsr/sidebar.tpl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;tpl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;extras&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;async&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;common:ui/dialog/dialog.async.js&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;deps&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;common:ui/dialog/dialog.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;common:ui/dialog/dialog.css&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 sidebar 模块被调用后，静态资源管理系统通过查询 sourcemap 可以得知，当前 sidebar 模块同步依赖 sidebar.js、sidebar.css，异步依赖 sdebar.async.js，在要输出的 html 前面，生成静态资源外链，我们得到最终的 html&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/static/ui/dialog/dialog_7defa41.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;btn-navbar&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;btn-navbar&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/static/common/ui/dialog/dialog$12cd4.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resourceMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;res&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;common:ui/dialog/dialog.async.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/satic/common/ui/dialog/dialog.async_449e169.js&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sidebar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;common:ui/dialog/dialog.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sidebar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a.btn-navbar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;common:ui/dialog/dialog.async.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上可见，后端模块化框架将同步模块的 script url 统一生成到页面底部，将 css url 统一生成在 head 中，对于异步模块(require.async)注册 resourceMap 代码，框架会通过 {script} 标签收集到页面所有 script，统一管理并按顺序输出 script 到相应位置。&lt;/p&gt;

&lt;p&gt;当我们想对模块进行打包，只需要使用一个 pack 配置项，对网站的静态资源进行打包，这样在 SourceMap 中，所有被打包的资源会有一个 pkg 属性指向该表中的资源，而这个资源，正是我们配置的打包策略。这样静态资源系统可以根据对应信息找到某个资源最终被合并后的 package 的 url，最后把这个 url 返回给页面。&lt;/p&gt;

&lt;h2&gt;自动合并静态资源&lt;/h2&gt;

&lt;p&gt;静态资源管理系统可以根据产品线上静态资源使用的数据，自动完成静态资源合并工作，对工程师完全透明，解决手工维护的未及时排除废弃资源、不可持续、成本大等问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/fis-static-resource-management/autopackage.png&quot; alt=&quot;arc&quot;&gt;&lt;/p&gt;

&lt;p&gt;详情请见 &lt;a href=&quot;https://speakerdeck.com/baidufe/jing-tai-zi-yuan-zi-dong-he-bing-xi-tong&quot;&gt;静态资源自动合并&lt;/a&gt;;&lt;/p&gt;

&lt;h2&gt;静态资源版本更新与缓存&lt;/h2&gt;

&lt;p&gt;静态资源管理系统采用基于文件内容的 hash 值来控制静态资源的版本更新，如下所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a_8244e91.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中”_82244e91 ”这串字符是根据 a.js 的文件内容进行 hash 运算得到的，只有文件内容发生变化了才会有更改。这样做的好处有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;线上的 a.js 不是同名文件覆盖，而是文件名 +hash 的冗余，所以可以先上线静态资源，再上线 html 页面，不存在间隙问题；&lt;/li&gt;
&lt;li&gt;遇到问题回滚版本的时候，无需回滚 a.js，只须回滚页面即可；&lt;/li&gt;
&lt;li&gt;由于静态资源版本号是文件内容的 hash，因此所有静态资源可以开启永久强缓存，只有更新了内容的文件才会缓存失效，缓存利用率大增；&lt;/li&gt;
&lt;li&gt;修改静态资源后会在线上产生新的文件，一个文件对应一个版本，因此不会受到构造 CDN 缓存形式的攻击&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;静态资源管理系统会在 compile 阶段识别文件中的定位标记(url)，计算对应文件的 hash，并自动替换为 &amp;#39;文件名 + hash&amp;#39;，无需工程师手动修改。&lt;/p&gt;

&lt;h2&gt;静态资源分级控制&lt;/h2&gt;

&lt;p&gt;静态资源管理系统可以对静态资源做进一步控制(Controlling Access to Features)以达到分级发布的效果，主要包括以下两块核心功能,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;feature flags, 用来控制 feature 对应的静态资源是否加载&lt;/li&gt;
&lt;li&gt;feature flippers, 可以灵活控制 feature，不仅仅是 on 或 off, 可以做到类似&amp;#39;3%用户可以访问此功能&amp;#39;、&amp;#39;对内部所有员工开放&amp;#39; 类似的效果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过以上的控制我们可以轻松做到发布一个新功能，让这个功能只对部分用户可访问，当功能完善后对所有用户开放，如果功能出现问题直接一键回滚即可。&lt;/p&gt;

&lt;p&gt;在项目中的类似代码如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{if $config.some eq &amp;#39;Fred&amp;#39;}
    do something new and amazing here.
{elseif $config.some eq &amp;#39;Wilma&amp;#39;}
    do the current boring stuff.
{else}
    whatever you are.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;静态资源管理系统会根据配置在运行时对 $config.some 进行干预.实现对静态资源的访问权控制，通过运行时的配置(feature flag)来控制静态资源，还可以支持“主干开发”的方式，来达到更快的迭代速度。&lt;/p&gt;

&lt;p&gt;我们还可以实现国际化的需求，原理同分级发布，在运行时的做一些更细致的差异化处理&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{if $lang == &amp;#39;zh-CN&amp;#39;}
    zh-CN
{/if}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;静态资源管理系统的核心是对静态资源进行调度，可以很灵活的适应各种性能优化和差异化处理的场景，来达到更快、更可靠、低成本的自动化项目交付。但是同时这个系统十分复杂，承载着各种职责，这个系统本身会成为整个网站的关键节点和瓶颈。&lt;/p&gt;
</description>
                <pubDate>Fri, 11 Apr 2014 00:00:00 +0800</pubDate>
                <link>http://fex.baidu.com/blog/2014/04/fis-static-resource-management</link>
                <guid isPermaLink="true">http://fex.baidu.com/blog/2014/04/fis-static-resource-management</guid>
            </item>
        
    </channel>
</rss>
